"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ocm_python_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ocm_python_client.exceptions import ApiAttributeError


def lazy_import():
    from ocm_python_client.model.add_on_installation import AddOnInstallation
    from ocm_python_client.model.aws import AWS
    from ocm_python_client.model.aws_infrastructure_access_role_grant import AWSInfrastructureAccessRoleGrant
    from ocm_python_client.model.billing_model import BillingModel
    from ocm_python_client.model.byo_oidc import ByoOidc
    from ocm_python_client.model.ccs import CCS
    from ocm_python_client.model.cloud_provider import CloudProvider
    from ocm_python_client.model.cloud_region import CloudRegion
    from ocm_python_client.model.cluster_api import ClusterAPI
    from ocm_python_client.model.cluster_console import ClusterConsole
    from ocm_python_client.model.cluster_health_state import ClusterHealthState
    from ocm_python_client.model.cluster_nodes import ClusterNodes
    from ocm_python_client.model.cluster_state import ClusterState
    from ocm_python_client.model.cluster_status import ClusterStatus
    from ocm_python_client.model.dns import DNS
    from ocm_python_client.model.external_configuration import ExternalConfiguration
    from ocm_python_client.model.flavour import Flavour
    from ocm_python_client.model.gcp import GCP
    from ocm_python_client.model.gcp_encryption_key import GCPEncryptionKey
    from ocm_python_client.model.gcp_network import GCPNetwork
    from ocm_python_client.model.group import Group
    from ocm_python_client.model.hypershift import Hypershift
    from ocm_python_client.model.identity_provider import IdentityProvider
    from ocm_python_client.model.inflight_check import InflightCheck
    from ocm_python_client.model.ingress import Ingress
    from ocm_python_client.model.machine_pool import MachinePool
    from ocm_python_client.model.managed_service import ManagedService
    from ocm_python_client.model.network import Network
    from ocm_python_client.model.node_pool import NodePool
    from ocm_python_client.model.product import Product
    from ocm_python_client.model.provision_shard import ProvisionShard
    from ocm_python_client.model.proxy import Proxy
    from ocm_python_client.model.subscription import Subscription
    from ocm_python_client.model.value import Value
    from ocm_python_client.model.version import Version
    globals()['AWS'] = AWS
    globals()['AWSInfrastructureAccessRoleGrant'] = AWSInfrastructureAccessRoleGrant
    globals()['AddOnInstallation'] = AddOnInstallation
    globals()['BillingModel'] = BillingModel
    globals()['ByoOidc'] = ByoOidc
    globals()['CCS'] = CCS
    globals()['CloudProvider'] = CloudProvider
    globals()['CloudRegion'] = CloudRegion
    globals()['ClusterAPI'] = ClusterAPI
    globals()['ClusterConsole'] = ClusterConsole
    globals()['ClusterHealthState'] = ClusterHealthState
    globals()['ClusterNodes'] = ClusterNodes
    globals()['ClusterState'] = ClusterState
    globals()['ClusterStatus'] = ClusterStatus
    globals()['DNS'] = DNS
    globals()['ExternalConfiguration'] = ExternalConfiguration
    globals()['Flavour'] = Flavour
    globals()['GCP'] = GCP
    globals()['GCPEncryptionKey'] = GCPEncryptionKey
    globals()['GCPNetwork'] = GCPNetwork
    globals()['Group'] = Group
    globals()['Hypershift'] = Hypershift
    globals()['IdentityProvider'] = IdentityProvider
    globals()['InflightCheck'] = InflightCheck
    globals()['Ingress'] = Ingress
    globals()['MachinePool'] = MachinePool
    globals()['ManagedService'] = ManagedService
    globals()['Network'] = Network
    globals()['NodePool'] = NodePool
    globals()['Product'] = Product
    globals()['ProvisionShard'] = ProvisionShard
    globals()['Proxy'] = Proxy
    globals()['Subscription'] = Subscription
    globals()['Value'] = Value
    globals()['Version'] = Version


class Cluster(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'kind': (str,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'href': (str,),  # noqa: E501
            'api': (ClusterAPI,),  # noqa: E501
            'aws': (AWS,),  # noqa: E501
            'aws_infrastructure_access_role_grants': ([AWSInfrastructureAccessRoleGrant],),  # noqa: E501
            'ccs': (CCS,),  # noqa: E501
            'dns': (DNS,),  # noqa: E501
            'fips': (bool,),  # noqa: E501
            'gcp': (GCP,),  # noqa: E501
            'gcp_encryption_key': (GCPEncryptionKey,),  # noqa: E501
            'gcp_network': (GCPNetwork,),  # noqa: E501
            'additional_trust_bundle': (str,),  # noqa: E501
            'addons': ([AddOnInstallation],),  # noqa: E501
            'billing_model': (BillingModel,),  # noqa: E501
            'byo_oidc': (ByoOidc,),  # noqa: E501
            'cloud_provider': (CloudProvider,),  # noqa: E501
            'console': (ClusterConsole,),  # noqa: E501
            'creation_timestamp': (datetime,),  # noqa: E501
            'disable_user_workload_monitoring': (bool,),  # noqa: E501
            'etcd_encryption': (bool,),  # noqa: E501
            'expiration_timestamp': (datetime,),  # noqa: E501
            'external_id': (str,),  # noqa: E501
            'external_configuration': (ExternalConfiguration,),  # noqa: E501
            'flavour': (Flavour,),  # noqa: E501
            'groups': ([Group],),  # noqa: E501
            'health_state': (ClusterHealthState,),  # noqa: E501
            'hypershift': (Hypershift,),  # noqa: E501
            'identity_providers': ([IdentityProvider],),  # noqa: E501
            'inflight_checks': ([InflightCheck],),  # noqa: E501
            'infra_id': (str,),  # noqa: E501
            'ingresses': ([Ingress],),  # noqa: E501
            'load_balancer_quota': (int,),  # noqa: E501
            'machine_pools': ([MachinePool],),  # noqa: E501
            'managed': (bool,),  # noqa: E501
            'managed_service': (ManagedService,),  # noqa: E501
            'multi_az': (bool,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'network': (Network,),  # noqa: E501
            'node_drain_grace_period': (Value,),  # noqa: E501
            'node_pools': ([NodePool],),  # noqa: E501
            'nodes': (ClusterNodes,),  # noqa: E501
            'openshift_version': (str,),  # noqa: E501
            'product': (Product,),  # noqa: E501
            'properties': ({str: (str,)},),  # noqa: E501
            'provision_shard': (ProvisionShard,),  # noqa: E501
            'proxy': (Proxy,),  # noqa: E501
            'region': (CloudRegion,),  # noqa: E501
            'state': (ClusterState,),  # noqa: E501
            'status': (ClusterStatus,),  # noqa: E501
            'storage_quota': (Value,),  # noqa: E501
            'subscription': (Subscription,),  # noqa: E501
            'version': (Version,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'kind': 'kind',  # noqa: E501
        'id': 'id',  # noqa: E501
        'href': 'href',  # noqa: E501
        'api': 'api',  # noqa: E501
        'aws': 'aws',  # noqa: E501
        'aws_infrastructure_access_role_grants': 'aws_infrastructure_access_role_grants',  # noqa: E501
        'ccs': 'ccs',  # noqa: E501
        'dns': 'dns',  # noqa: E501
        'fips': 'fips',  # noqa: E501
        'gcp': 'gcp',  # noqa: E501
        'gcp_encryption_key': 'gcp_encryption_key',  # noqa: E501
        'gcp_network': 'gcp_network',  # noqa: E501
        'additional_trust_bundle': 'additional_trust_bundle',  # noqa: E501
        'addons': 'addons',  # noqa: E501
        'billing_model': 'billing_model',  # noqa: E501
        'byo_oidc': 'byo_oidc',  # noqa: E501
        'cloud_provider': 'cloud_provider',  # noqa: E501
        'console': 'console',  # noqa: E501
        'creation_timestamp': 'creation_timestamp',  # noqa: E501
        'disable_user_workload_monitoring': 'disable_user_workload_monitoring',  # noqa: E501
        'etcd_encryption': 'etcd_encryption',  # noqa: E501
        'expiration_timestamp': 'expiration_timestamp',  # noqa: E501
        'external_id': 'external_id',  # noqa: E501
        'external_configuration': 'external_configuration',  # noqa: E501
        'flavour': 'flavour',  # noqa: E501
        'groups': 'groups',  # noqa: E501
        'health_state': 'health_state',  # noqa: E501
        'hypershift': 'hypershift',  # noqa: E501
        'identity_providers': 'identity_providers',  # noqa: E501
        'inflight_checks': 'inflight_checks',  # noqa: E501
        'infra_id': 'infra_id',  # noqa: E501
        'ingresses': 'ingresses',  # noqa: E501
        'load_balancer_quota': 'load_balancer_quota',  # noqa: E501
        'machine_pools': 'machine_pools',  # noqa: E501
        'managed': 'managed',  # noqa: E501
        'managed_service': 'managed_service',  # noqa: E501
        'multi_az': 'multi_az',  # noqa: E501
        'name': 'name',  # noqa: E501
        'network': 'network',  # noqa: E501
        'node_drain_grace_period': 'node_drain_grace_period',  # noqa: E501
        'node_pools': 'node_pools',  # noqa: E501
        'nodes': 'nodes',  # noqa: E501
        'openshift_version': 'openshift_version',  # noqa: E501
        'product': 'product',  # noqa: E501
        'properties': 'properties',  # noqa: E501
        'provision_shard': 'provision_shard',  # noqa: E501
        'proxy': 'proxy',  # noqa: E501
        'region': 'region',  # noqa: E501
        'state': 'state',  # noqa: E501
        'status': 'status',  # noqa: E501
        'storage_quota': 'storage_quota',  # noqa: E501
        'subscription': 'subscription',  # noqa: E501
        'version': 'version',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Cluster - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            kind (str): Indicates the type of this object. Will be 'Cluster' if this is a complete object or 'ClusterLink' if it is just a link.. [optional]  # noqa: E501
            id (str): Unique identifier of the object.. [optional]  # noqa: E501
            href (str): Self link.. [optional]  # noqa: E501
            api (ClusterAPI): [optional]  # noqa: E501
            aws (AWS): [optional]  # noqa: E501
            aws_infrastructure_access_role_grants ([AWSInfrastructureAccessRoleGrant]): List of AWS infrastructure access role grants on this cluster.. [optional]  # noqa: E501
            ccs (CCS): [optional]  # noqa: E501
            dns (DNS): [optional]  # noqa: E501
            fips (bool): Create cluster that uses FIPS Validated / Modules in Process cryptographic libraries.. [optional]  # noqa: E501
            gcp (GCP): [optional]  # noqa: E501
            gcp_encryption_key (GCPEncryptionKey): [optional]  # noqa: E501
            gcp_network (GCPNetwork): [optional]  # noqa: E501
            additional_trust_bundle (str): Additional trust bundle.. [optional]  # noqa: E501
            addons ([AddOnInstallation]): List of add-ons on this cluster.. [optional]  # noqa: E501
            billing_model (BillingModel): [optional]  # noqa: E501
            byo_oidc (ByoOidc): [optional]  # noqa: E501
            cloud_provider (CloudProvider): [optional]  # noqa: E501
            console (ClusterConsole): [optional]  # noqa: E501
            creation_timestamp (datetime): Date and time when the cluster was initially created, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).. [optional]  # noqa: E501
            disable_user_workload_monitoring (bool): Indicates whether the User workload monitoring is enabled or not It is enabled by default. [optional]  # noqa: E501
            etcd_encryption (bool): Indicates whether that etcd is encrypted or not. This is set only during cluster creation.. [optional]  # noqa: E501
            expiration_timestamp (datetime): Date and time when the cluster will be automatically deleted, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt). If no timestamp is provided, the cluster will never expire.  This option is unsupported.. [optional]  # noqa: E501
            external_id (str): External identifier of the cluster, generated by the installer.. [optional]  # noqa: E501
            external_configuration (ExternalConfiguration): [optional]  # noqa: E501
            flavour (Flavour): [optional]  # noqa: E501
            groups ([Group]): Link to the collection of groups of user of the cluster.. [optional]  # noqa: E501
            health_state (ClusterHealthState): [optional]  # noqa: E501
            hypershift (Hypershift): [optional]  # noqa: E501
            identity_providers ([IdentityProvider]): Link to the collection of identity providers of the cluster.. [optional]  # noqa: E501
            inflight_checks ([InflightCheck]): List of inflight checks on this cluster.. [optional]  # noqa: E501
            infra_id (str): InfraID is used for example to name the VPCs.. [optional]  # noqa: E501
            ingresses ([Ingress]): List of ingresses on this cluster.. [optional]  # noqa: E501
            load_balancer_quota (int): Load Balancer quota to be assigned to the cluster.. [optional]  # noqa: E501
            machine_pools ([MachinePool]): List of machine pools on this cluster.. [optional]  # noqa: E501
            managed (bool): Flag indicating if the cluster is managed (by Red Hat) or self-managed by the user.. [optional]  # noqa: E501
            managed_service (ManagedService): [optional]  # noqa: E501
            multi_az (bool): Flag indicating if the cluster should be created with nodes in different availability zones or all the nodes in a single one randomly selected.. [optional]  # noqa: E501
            name (str): Name of the cluster. This name is assigned by the user when the cluster is created.. [optional]  # noqa: E501
            network (Network): [optional]  # noqa: E501
            node_drain_grace_period (Value): [optional]  # noqa: E501
            node_pools ([NodePool]): List of node pools on this cluster. NodePool is a scalable set of worker nodes attached to a hosted cluster.. [optional]  # noqa: E501
            nodes (ClusterNodes): [optional]  # noqa: E501
            openshift_version (str): Version of _OpenShift_ installed in the cluster, for example `4.0.0-0.2`.  When retrieving a cluster this will always be reported.  When provisioning a cluster this will be ignored, as the version to deploy will be determined internally.. [optional]  # noqa: E501
            product (Product): [optional]  # noqa: E501
            properties ({str: (str,)}): User defined properties for tagging and querying.. [optional]  # noqa: E501
            provision_shard (ProvisionShard): [optional]  # noqa: E501
            proxy (Proxy): [optional]  # noqa: E501
            region (CloudRegion): [optional]  # noqa: E501
            state (ClusterState): [optional]  # noqa: E501
            status (ClusterStatus): [optional]  # noqa: E501
            storage_quota (Value): [optional]  # noqa: E501
            subscription (Subscription): [optional]  # noqa: E501
            version (Version): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Cluster - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            kind (str): Indicates the type of this object. Will be 'Cluster' if this is a complete object or 'ClusterLink' if it is just a link.. [optional]  # noqa: E501
            id (str): Unique identifier of the object.. [optional]  # noqa: E501
            href (str): Self link.. [optional]  # noqa: E501
            api (ClusterAPI): [optional]  # noqa: E501
            aws (AWS): [optional]  # noqa: E501
            aws_infrastructure_access_role_grants ([AWSInfrastructureAccessRoleGrant]): List of AWS infrastructure access role grants on this cluster.. [optional]  # noqa: E501
            ccs (CCS): [optional]  # noqa: E501
            dns (DNS): [optional]  # noqa: E501
            fips (bool): Create cluster that uses FIPS Validated / Modules in Process cryptographic libraries.. [optional]  # noqa: E501
            gcp (GCP): [optional]  # noqa: E501
            gcp_encryption_key (GCPEncryptionKey): [optional]  # noqa: E501
            gcp_network (GCPNetwork): [optional]  # noqa: E501
            additional_trust_bundle (str): Additional trust bundle.. [optional]  # noqa: E501
            addons ([AddOnInstallation]): List of add-ons on this cluster.. [optional]  # noqa: E501
            billing_model (BillingModel): [optional]  # noqa: E501
            byo_oidc (ByoOidc): [optional]  # noqa: E501
            cloud_provider (CloudProvider): [optional]  # noqa: E501
            console (ClusterConsole): [optional]  # noqa: E501
            creation_timestamp (datetime): Date and time when the cluster was initially created, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt).. [optional]  # noqa: E501
            disable_user_workload_monitoring (bool): Indicates whether the User workload monitoring is enabled or not It is enabled by default. [optional]  # noqa: E501
            etcd_encryption (bool): Indicates whether that etcd is encrypted or not. This is set only during cluster creation.. [optional]  # noqa: E501
            expiration_timestamp (datetime): Date and time when the cluster will be automatically deleted, using the format defined in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt). If no timestamp is provided, the cluster will never expire.  This option is unsupported.. [optional]  # noqa: E501
            external_id (str): External identifier of the cluster, generated by the installer.. [optional]  # noqa: E501
            external_configuration (ExternalConfiguration): [optional]  # noqa: E501
            flavour (Flavour): [optional]  # noqa: E501
            groups ([Group]): Link to the collection of groups of user of the cluster.. [optional]  # noqa: E501
            health_state (ClusterHealthState): [optional]  # noqa: E501
            hypershift (Hypershift): [optional]  # noqa: E501
            identity_providers ([IdentityProvider]): Link to the collection of identity providers of the cluster.. [optional]  # noqa: E501
            inflight_checks ([InflightCheck]): List of inflight checks on this cluster.. [optional]  # noqa: E501
            infra_id (str): InfraID is used for example to name the VPCs.. [optional]  # noqa: E501
            ingresses ([Ingress]): List of ingresses on this cluster.. [optional]  # noqa: E501
            load_balancer_quota (int): Load Balancer quota to be assigned to the cluster.. [optional]  # noqa: E501
            machine_pools ([MachinePool]): List of machine pools on this cluster.. [optional]  # noqa: E501
            managed (bool): Flag indicating if the cluster is managed (by Red Hat) or self-managed by the user.. [optional]  # noqa: E501
            managed_service (ManagedService): [optional]  # noqa: E501
            multi_az (bool): Flag indicating if the cluster should be created with nodes in different availability zones or all the nodes in a single one randomly selected.. [optional]  # noqa: E501
            name (str): Name of the cluster. This name is assigned by the user when the cluster is created.. [optional]  # noqa: E501
            network (Network): [optional]  # noqa: E501
            node_drain_grace_period (Value): [optional]  # noqa: E501
            node_pools ([NodePool]): List of node pools on this cluster. NodePool is a scalable set of worker nodes attached to a hosted cluster.. [optional]  # noqa: E501
            nodes (ClusterNodes): [optional]  # noqa: E501
            openshift_version (str): Version of _OpenShift_ installed in the cluster, for example `4.0.0-0.2`.  When retrieving a cluster this will always be reported.  When provisioning a cluster this will be ignored, as the version to deploy will be determined internally.. [optional]  # noqa: E501
            product (Product): [optional]  # noqa: E501
            properties ({str: (str,)}): User defined properties for tagging and querying.. [optional]  # noqa: E501
            provision_shard (ProvisionShard): [optional]  # noqa: E501
            proxy (Proxy): [optional]  # noqa: E501
            region (CloudRegion): [optional]  # noqa: E501
            state (ClusterState): [optional]  # noqa: E501
            status (ClusterStatus): [optional]  # noqa: E501
            storage_quota (Value): [optional]  # noqa: E501
            subscription (Subscription): [optional]  # noqa: E501
            version (Version): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
