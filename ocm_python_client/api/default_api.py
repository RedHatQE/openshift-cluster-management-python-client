"""
    clusters_mgmt

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: ocm-feedback@redhat.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ocm_python_client.api_client import ApiClient, Endpoint as _Endpoint
from ocm_python_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ocm_python_client.model.aws import AWS
from ocm_python_client.model.aws_infrastructure_access_role import AWSInfrastructureAccessRole
from ocm_python_client.model.aws_infrastructure_access_role_grant import AWSInfrastructureAccessRoleGrant
from ocm_python_client.model.add_on import AddOn
from ocm_python_client.model.add_on_installation import AddOnInstallation
from ocm_python_client.model.add_on_version import AddOnVersion
from ocm_python_client.model.addon_upgrade_policy import AddonUpgradePolicy
from ocm_python_client.model.addon_upgrade_policy_state import AddonUpgradePolicyState
from ocm_python_client.model.alerts_info import AlertsInfo
from ocm_python_client.model.api_clusters_mgmt_v1_addons_addon_id_versions_get200_response import ApiClustersMgmtV1AddonsAddonIdVersionsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_addons_get200_response import ApiClustersMgmtV1AddonsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_aws_infrastructure_access_roles_get200_response import ApiClustersMgmtV1AwsInfrastructureAccessRolesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_aws_inquiries_machine_types_post200_response import ApiClustersMgmtV1AwsInquiriesMachineTypesPost200Response
from ocm_python_client.model.api_clusters_mgmt_v1_aws_inquiries_regions_post200_response import ApiClustersMgmtV1AwsInquiriesRegionsPost200Response
from ocm_python_client.model.api_clusters_mgmt_v1_aws_inquiries_sts_credential_requests_get200_response import ApiClustersMgmtV1AwsInquiriesStsCredentialRequestsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_aws_inquiries_sts_policies_get200_response import ApiClustersMgmtV1AwsInquiriesStsPoliciesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_aws_inquiries_vpcs_post200_response import ApiClustersMgmtV1AwsInquiriesVpcsPost200Response
from ocm_python_client.model.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_available_regions_post200_response import ApiClustersMgmtV1CloudProvidersCloudProviderIdAvailableRegionsPost200Response
from ocm_python_client.model.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_get200_response import ApiClustersMgmtV1CloudProvidersCloudProviderIdRegionsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_cloud_providers_get200_response import ApiClustersMgmtV1CloudProvidersGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_get200_response import ApiClustersMgmtV1ClustersClusterIdAddonUpgradePoliciesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_addons_get200_response import ApiClustersMgmtV1ClustersClusterIdAddonsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_get200_response import ApiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_get200_response import ApiClustersMgmtV1ClustersClusterIdAwsPrivateLinkConfigurationPrincipalsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_get200_response import ApiClustersMgmtV1ClustersClusterIdControlPlaneUpgradePoliciesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_get200_response import ApiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_get200_response import ApiClustersMgmtV1ClustersClusterIdExternalConfigurationManifestsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_get200_response import ApiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_get200_response import ApiClustersMgmtV1ClustersClusterIdGateAgreementsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_groups_get200_response import ApiClustersMgmtV1ClustersClusterIdGroupsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_get200_response import ApiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_get200_response import ApiClustersMgmtV1ClustersClusterIdIdentityProvidersGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_get200_response import ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post200_response import ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersImportPost200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post_request import ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersImportPostRequest
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_get200_response import ApiClustersMgmtV1ClustersClusterIdIngressesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_get200_response import ApiClustersMgmtV1ClustersClusterIdLimitedSupportReasonsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_logs_get200_response import ApiClustersMgmtV1ClustersClusterIdLogsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_get200_response import ApiClustersMgmtV1ClustersClusterIdMachinePoolsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_get200_response import ApiClustersMgmtV1ClustersClusterIdNodePoolsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_get200_response import ApiClustersMgmtV1ClustersClusterIdStsOperatorRolesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_get200_response import ApiClustersMgmtV1ClustersClusterIdUpgradePoliciesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_clusters_get200_response import ApiClustersMgmtV1ClustersGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_flavours_get200_response import ApiClustersMgmtV1FlavoursGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_gcp_inquiries_encryption_keys_post200_response import ApiClustersMgmtV1GcpInquiriesEncryptionKeysPost200Response
from ocm_python_client.model.api_clusters_mgmt_v1_gcp_inquiries_key_rings_post200_response import ApiClustersMgmtV1GcpInquiriesKeyRingsPost200Response
from ocm_python_client.model.api_clusters_mgmt_v1_limited_support_reason_templates_get200_response import ApiClustersMgmtV1LimitedSupportReasonTemplatesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_machine_types_get200_response import ApiClustersMgmtV1MachineTypesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_products_get200_response import ApiClustersMgmtV1ProductsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_provision_shards_get200_response import ApiClustersMgmtV1ProvisionShardsGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_version_gates_get200_response import ApiClustersMgmtV1VersionGatesGet200Response
from ocm_python_client.model.api_clusters_mgmt_v1_versions_get200_response import ApiClustersMgmtV1VersionsGet200Response
from ocm_python_client.model.cpu_totals_node_role_os_metric_node import CPUTotalsNodeRoleOSMetricNode
from ocm_python_client.model.cloud_provider import CloudProvider
from ocm_python_client.model.cloud_provider_data import CloudProviderData
from ocm_python_client.model.cloud_region import CloudRegion
from ocm_python_client.model.cluster import Cluster
from ocm_python_client.model.cluster_credentials import ClusterCredentials
from ocm_python_client.model.cluster_operators_info import ClusterOperatorsInfo
from ocm_python_client.model.cluster_resources import ClusterResources
from ocm_python_client.model.cluster_status import ClusterStatus
from ocm_python_client.model.control_plane_upgrade_policy import ControlPlaneUpgradePolicy
from ocm_python_client.model.environment import Environment
from ocm_python_client.model.error import Error
from ocm_python_client.model.event import Event
from ocm_python_client.model.external_configuration import ExternalConfiguration
from ocm_python_client.model.flavour import Flavour
from ocm_python_client.model.group import Group
from ocm_python_client.model.ht_passwd_user import HTPasswdUser
from ocm_python_client.model.hypershift_config import HypershiftConfig
from ocm_python_client.model.identity_provider import IdentityProvider
from ocm_python_client.model.ingress import Ingress
from ocm_python_client.model.label import Label
from ocm_python_client.model.limited_support_reason import LimitedSupportReason
from ocm_python_client.model.limited_support_reason_template import LimitedSupportReasonTemplate
from ocm_python_client.model.log import Log
from ocm_python_client.model.machine_pool import MachinePool
from ocm_python_client.model.machine_type import MachineType
from ocm_python_client.model.manifest import Manifest
from ocm_python_client.model.metadata import Metadata
from ocm_python_client.model.node_pool import NodePool
from ocm_python_client.model.nodes_info import NodesInfo
from ocm_python_client.model.operator_iam_role import OperatorIAMRole
from ocm_python_client.model.private_link_configuration import PrivateLinkConfiguration
from ocm_python_client.model.private_link_principal import PrivateLinkPrincipal
from ocm_python_client.model.product import Product
from ocm_python_client.model.provision_shard import ProvisionShard
from ocm_python_client.model.socket_totals_node_role_os_metric_node import SocketTotalsNodeRoleOSMetricNode
from ocm_python_client.model.syncset import Syncset
from ocm_python_client.model.upgrade_policy import UpgradePolicy
from ocm_python_client.model.upgrade_policy_state import UpgradePolicyState
from ocm_python_client.model.user import User
from ocm_python_client.model.version import Version
from ocm_python_client.model.version_gate import VersionGate
from ocm_python_client.model.version_gate_agreement import VersionGateAgreement


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.api_clusters_mgmt_v1_addons_addon_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                ],
                'required': [
                    'addon_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                },
                'location_map': {
                    'addon_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_addon_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (AddOn,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                ],
                'required': [
                    'addon_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                },
                'location_map': {
                    'addon_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_addon_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (AddOn,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'add_on',
                ],
                'required': [
                    'addon_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                    'add_on':
                        (AddOn,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                },
                'location_map': {
                    'addon_id': 'path',
                    'add_on': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_addon_id_versions_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AddonsAddonIdVersionsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}/versions',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_versions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [
                    'addon_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'addon_id': 'path',
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_addon_id_versions_post_endpoint = _Endpoint(
            settings={
                'response_type': (AddOnVersion,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}/versions',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_versions_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'add_on_version',
                ],
                'required': [
                    'addon_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                    'add_on_version':
                        (AddOnVersion,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                },
                'location_map': {
                    'addon_id': 'path',
                    'add_on_version': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}/versions/{version_id}',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_versions_version_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'version_id',
                ],
                'required': [
                    'addon_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                    'version_id':
                        (str,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'addon_id': 'path',
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (AddOnVersion,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}/versions/{version_id}',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_versions_version_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'version_id',
                ],
                'required': [
                    'addon_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                    'version_id':
                        (str,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'addon_id': 'path',
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (AddOnVersion,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons/{addon_id}/versions/{version_id}',
                'operation_id': 'api_clusters_mgmt_v1_addons_addon_id_versions_version_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'version_id',
                    'add_on_version',
                ],
                'required': [
                    'addon_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (str,),
                    'version_id':
                        (str,),
                    'add_on_version':
                        (AddOnVersion,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    'version_id': 'version_id',
                },
                'location_map': {
                    'addon_id': 'path',
                    'version_id': 'path',
                    'add_on_version': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AddonsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons',
                'operation_id': 'api_clusters_mgmt_v1_addons_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_addons_post_endpoint = _Endpoint(
            settings={
                'response_type': (AddOn,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/addons',
                'operation_id': 'api_clusters_mgmt_v1_addons_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_on',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_on':
                        (AddOn,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_on': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_aws_infrastructure_access_roles_aws_infrastructure_access_role_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (AWSInfrastructureAccessRole,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/aws_infrastructure_access_roles/{aws_infrastructure_access_role_id}',
                'operation_id': 'api_clusters_mgmt_v1_aws_infrastructure_access_roles_aws_infrastructure_access_role_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'aws_infrastructure_access_role_id',
                ],
                'required': [
                    'aws_infrastructure_access_role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'aws_infrastructure_access_role_id':
                        (str,),
                },
                'attribute_map': {
                    'aws_infrastructure_access_role_id': 'aws_infrastructure_access_role_id',
                },
                'location_map': {
                    'aws_infrastructure_access_role_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_aws_infrastructure_access_roles_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInfrastructureAccessRolesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/aws_infrastructure_access_roles',
                'operation_id': 'api_clusters_mgmt_v1_aws_infrastructure_access_roles_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_aws_inquiries_machine_types_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInquiriesMachineTypesPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/aws_inquiries/machine_types',
                'operation_id': 'api_clusters_mgmt_v1_aws_inquiries_machine_types_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                    'cloud_provider_data',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'cloud_provider_data':
                        (CloudProviderData,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                    'cloud_provider_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_aws_inquiries_regions_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInquiriesRegionsPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/aws_inquiries/regions',
                'operation_id': 'api_clusters_mgmt_v1_aws_inquiries_regions_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                    'cloud_provider_data',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'cloud_provider_data':
                        (CloudProviderData,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                    'cloud_provider_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_aws_inquiries_sts_credential_requests_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInquiriesStsCredentialRequestsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/aws_inquiries/sts_credential_requests',
                'operation_id': 'api_clusters_mgmt_v1_aws_inquiries_sts_credential_requests_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_aws_inquiries_sts_policies_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInquiriesStsPoliciesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/aws_inquiries/sts_policies',
                'operation_id': 'api_clusters_mgmt_v1_aws_inquiries_sts_policies_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_aws_inquiries_vpcs_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInquiriesVpcsPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/aws_inquiries/vpcs',
                'operation_id': 'api_clusters_mgmt_v1_aws_inquiries_vpcs_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                    'cloud_provider_data',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'cloud_provider_data':
                        (CloudProviderData,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                    'cloud_provider_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_available_regions_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1CloudProvidersCloudProviderIdAvailableRegionsPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/available_regions',
                'operation_id': 'api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_available_regions_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_provider_id',
                    'page',
                    'size',
                    'aws',
                ],
                'required': [
                    'cloud_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_provider_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'aws':
                        (AWS,),
                },
                'attribute_map': {
                    'cloud_provider_id': 'cloud_provider_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cloud_provider_id': 'path',
                    'page': 'query',
                    'size': 'query',
                    'aws': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (CloudProvider,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}',
                'operation_id': 'api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_provider_id',
                ],
                'required': [
                    'cloud_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_provider_id':
                        (str,),
                },
                'attribute_map': {
                    'cloud_provider_id': 'cloud_provider_id',
                },
                'location_map': {
                    'cloud_provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1CloudProvidersCloudProviderIdRegionsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/regions',
                'operation_id': 'api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_provider_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cloud_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_provider_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cloud_provider_id': 'cloud_provider_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cloud_provider_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_region_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (CloudRegion,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/cloud_providers/{cloud_provider_id}/regions/{region_id}',
                'operation_id': 'api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_region_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_provider_id',
                    'region_id',
                ],
                'required': [
                    'cloud_provider_id',
                    'region_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_provider_id':
                        (str,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'cloud_provider_id': 'cloud_provider_id',
                    'region_id': 'region_id',
                },
                'location_map': {
                    'cloud_provider_id': 'path',
                    'region_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_cloud_providers_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1CloudProvidersGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/cloud_providers',
                'operation_id': 'api_clusters_mgmt_v1_cloud_providers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_addon_inquiry_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (AddOn,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_inquiries/{addon_inquiry_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_addon_inquiry_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addon_inquiry_id',
                ],
                'required': [
                    'cluster_id',
                    'addon_inquiry_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addon_inquiry_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addon_inquiry_id': 'addon_inquiry_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addon_inquiry_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AddonsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_inquiries',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies/{addon_upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addon_upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addon_upgrade_policy_id': 'addon_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addon_upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (AddonUpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies/{addon_upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addon_upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addon_upgrade_policy_id': 'addon_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addon_upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (AddonUpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies/{addon_upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                    'addon_upgrade_policy',
                ],
                'required': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addon_upgrade_policy_id':
                        (str,),
                    'addon_upgrade_policy':
                        (AddonUpgradePolicy,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addon_upgrade_policy_id': 'addon_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addon_upgrade_policy_id': 'path',
                    'addon_upgrade_policy': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_get_endpoint = _Endpoint(
            settings={
                'response_type': (AddonUpgradePolicyState,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies/{addon_upgrade_policy_id}/state',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addon_upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addon_upgrade_policy_id': 'addon_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addon_upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_patch_endpoint = _Endpoint(
            settings={
                'response_type': (AddonUpgradePolicyState,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies/{addon_upgrade_policy_id}/state',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                    'addon_upgrade_policy_state',
                ],
                'required': [
                    'cluster_id',
                    'addon_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addon_upgrade_policy_id':
                        (str,),
                    'addon_upgrade_policy_state':
                        (AddonUpgradePolicyState,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addon_upgrade_policy_id': 'addon_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addon_upgrade_policy_id': 'path',
                    'addon_upgrade_policy_state': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdAddonUpgradePoliciesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_post_endpoint = _Endpoint(
            settings={
                'response_type': (AddonUpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addon_upgrade_policies',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addon_upgrade_policy',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addon_upgrade_policy':
                        (AddonUpgradePolicy,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addon_upgrade_policy': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addons/{addoninstallation_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addoninstallation_id',
                ],
                'required': [
                    'cluster_id',
                    'addoninstallation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addoninstallation_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addoninstallation_id': 'addoninstallation_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addoninstallation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (AddOnInstallation,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addons/{addoninstallation_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addoninstallation_id',
                ],
                'required': [
                    'cluster_id',
                    'addoninstallation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addoninstallation_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addoninstallation_id': 'addoninstallation_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addoninstallation_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (AddOnInstallation,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addons/{addoninstallation_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'addoninstallation_id',
                    'add_on_installation',
                ],
                'required': [
                    'cluster_id',
                    'addoninstallation_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'addoninstallation_id':
                        (str,),
                    'add_on_installation':
                        (AddOnInstallation,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'addoninstallation_id': 'addoninstallation_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'addoninstallation_id': 'path',
                    'add_on_installation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addons_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdAddonsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addons',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addons_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_addons_post_endpoint = _Endpoint(
            settings={
                'response_type': (AddOnInstallation,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/addons',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_addons_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'add_on_installation',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'add_on_installation':
                        (AddOnInstallation,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'add_on_installation': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants/{aws_infrastructure_access_role_grant_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'aws_infrastructure_access_role_grant_id',
                ],
                'required': [
                    'cluster_id',
                    'aws_infrastructure_access_role_grant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'aws_infrastructure_access_role_grant_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'aws_infrastructure_access_role_grant_id': 'aws_infrastructure_access_role_grant_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'aws_infrastructure_access_role_grant_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (AWSInfrastructureAccessRoleGrant,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants/{aws_infrastructure_access_role_grant_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'aws_infrastructure_access_role_grant_id',
                ],
                'required': [
                    'cluster_id',
                    'aws_infrastructure_access_role_grant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'aws_infrastructure_access_role_grant_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'aws_infrastructure_access_role_grant_id': 'aws_infrastructure_access_role_grant_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'aws_infrastructure_access_role_grant_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_post_endpoint = _Endpoint(
            settings={
                'response_type': (AWSInfrastructureAccessRoleGrant,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws_infrastructure_access_role_grants',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'aws_infrastructure_access_role_grant',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'aws_infrastructure_access_role_grant':
                        (AWSInfrastructureAccessRoleGrant,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'aws_infrastructure_access_role_grant': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_get_endpoint = _Endpoint(
            settings={
                'response_type': (PrivateLinkConfiguration,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdAwsPrivateLinkConfigurationPrincipalsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration/principals',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'search',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_post_endpoint = _Endpoint(
            settings={
                'response_type': (PrivateLinkPrincipal,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration/principals',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'private_link_principal',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'private_link_principal':
                        (PrivateLinkPrincipal,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'private_link_principal': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration/principals/{principal_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'principal_id',
                ],
                'required': [
                    'cluster_id',
                    'principal_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'principal_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'principal_id': 'principal_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'principal_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (PrivateLinkPrincipal,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/aws/private_link_configuration/principals/{principal_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'principal_id',
                ],
                'required': [
                    'cluster_id',
                    'principal_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'principal_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'principal_id': 'principal_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'principal_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_clusterdeployment_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/clusterdeployment',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_clusterdeployment_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/control_plane/upgrade_policies/{control_plane_upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'control_plane_upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'control_plane_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'control_plane_upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'control_plane_upgrade_policy_id': 'control_plane_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'control_plane_upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (ControlPlaneUpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/control_plane/upgrade_policies/{control_plane_upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'control_plane_upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'control_plane_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'control_plane_upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'control_plane_upgrade_policy_id': 'control_plane_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'control_plane_upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (ControlPlaneUpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/control_plane/upgrade_policies/{control_plane_upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'control_plane_upgrade_policy_id',
                    'control_plane_upgrade_policy',
                ],
                'required': [
                    'cluster_id',
                    'control_plane_upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'control_plane_upgrade_policy_id':
                        (str,),
                    'control_plane_upgrade_policy':
                        (ControlPlaneUpgradePolicy,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'control_plane_upgrade_policy_id': 'control_plane_upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'control_plane_upgrade_policy_id': 'path',
                    'control_plane_upgrade_policy': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdControlPlaneUpgradePoliciesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/control_plane/upgrade_policies',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_post_endpoint = _Endpoint(
            settings={
                'response_type': (ControlPlaneUpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/control_plane/upgrade_policies',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'control_plane_upgrade_policy',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'control_plane_upgrade_policy':
                        (ControlPlaneUpgradePolicy,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'control_plane_upgrade_policy': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_credentials_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClusterCredentials,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/credentials',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_credentials_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'deprovision',
                    'dry_run',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'deprovision':
                        (bool,),
                    'dry_run':
                        (bool,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'deprovision': 'deprovision',
                    'dry_run': 'dry_run',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'deprovision': 'query',
                    'dry_run': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_get_endpoint = _Endpoint(
            settings={
                'response_type': (ExternalConfiguration,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels/{label_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'label_id',
                ],
                'required': [
                    'cluster_id',
                    'label_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'label_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'label_id': 'label_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'label_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels/{label_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'label_id',
                ],
                'required': [
                    'cluster_id',
                    'label_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'label_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'label_id': 'label_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'label_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels/{label_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'label_id',
                    'label',
                ],
                'required': [
                    'cluster_id',
                    'label_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'label_id':
                        (str,),
                    'label':
                        (Label,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'label_id': 'label_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'label_id': 'path',
                    'label': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_post_endpoint = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/labels',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'label',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'label':
                        (Label,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'label': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdExternalConfigurationManifestsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/manifests',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/manifests/{manifest_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'manifest_id',
                ],
                'required': [
                    'cluster_id',
                    'manifest_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'manifest_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'manifest_id': 'manifest_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'manifest_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Manifest,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/manifests/{manifest_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'manifest_id',
                ],
                'required': [
                    'cluster_id',
                    'manifest_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'manifest_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'manifest_id': 'manifest_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'manifest_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Manifest,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/manifests/{manifest_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'manifest_id',
                    'manifest',
                ],
                'required': [
                    'cluster_id',
                    'manifest_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'manifest_id':
                        (str,),
                    'manifest':
                        (Manifest,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'manifest_id': 'manifest_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'manifest_id': 'path',
                    'manifest': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_post_endpoint = _Endpoint(
            settings={
                'response_type': (Manifest,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/manifests',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'manifest',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'manifest':
                        (Manifest,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'manifest': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_post_endpoint = _Endpoint(
            settings={
                'response_type': (Syncset,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'syncset',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'syncset':
                        (Syncset,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'syncset': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets/{syncset_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'syncset_id',
                ],
                'required': [
                    'cluster_id',
                    'syncset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'syncset_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'syncset_id': 'syncset_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'syncset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Syncset,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets/{syncset_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'syncset_id',
                ],
                'required': [
                    'cluster_id',
                    'syncset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'syncset_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'syncset_id': 'syncset_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'syncset_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Syncset,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/external_configuration/syncsets/{syncset_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'syncset_id',
                    'syncset',
                ],
                'required': [
                    'cluster_id',
                    'syncset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'syncset_id':
                        (str,),
                    'syncset':
                        (Syncset,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'syncset_id': 'syncset_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'syncset_id': 'path',
                    'syncset': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdGateAgreementsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/gate_agreements',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_post_endpoint = _Endpoint(
            settings={
                'response_type': (VersionGateAgreement,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/gate_agreements',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'version_gate_agreement',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'version_gate_agreement':
                        (VersionGateAgreement,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'version_gate_agreement': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/gate_agreements/{version_gate_agreement_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'version_gate_agreement_id',
                ],
                'required': [
                    'cluster_id',
                    'version_gate_agreement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'version_gate_agreement_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'version_gate_agreement_id': 'version_gate_agreement_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'version_gate_agreement_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (VersionGateAgreement,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/gate_agreements/{version_gate_agreement_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'version_gate_agreement_id',
                ],
                'required': [
                    'cluster_id',
                    'version_gate_agreement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'version_gate_agreement_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'version_gate_agreement_id': 'version_gate_agreement_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'version_gate_agreement_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Cluster,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_groups_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdGroupsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_groups_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'group_id',
                ],
                'required': [
                    'cluster_id',
                    'group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'group_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'group_id': 'group_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'group_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'group_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                    'group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'group_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'group_id': 'group_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'group_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_post_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'group_id',
                    'user',
                ],
                'required': [
                    'cluster_id',
                    'group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'group_id':
                        (str,),
                    'user':
                        (User,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'group_id': 'group_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'group_id': 'path',
                    'user': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users/{user_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'group_id',
                    'user_id',
                ],
                'required': [
                    'cluster_id',
                    'group_id',
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'group_id':
                        (str,),
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'group_id': 'group_id',
                    'user_id': 'user_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'group_id': 'path',
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/groups/{group_id}/users/{user_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'group_id',
                    'user_id',
                ],
                'required': [
                    'cluster_id',
                    'group_id',
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'group_id':
                        (str,),
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'group_id': 'group_id',
                    'user_id': 'user_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'group_id': 'path',
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_hibernate_post_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/hibernate',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_hibernate_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_hypershift_get_endpoint = _Endpoint(
            settings={
                'response_type': (HypershiftConfig,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/hypershift',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_hypershift_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdIdentityProvidersGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityProvider,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users/{htpasswd_user_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                    'htpasswd_user_id',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                    'htpasswd_user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                    'htpasswd_user_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                    'htpasswd_user_id': 'htpasswd_user_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                    'htpasswd_user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (HTPasswdUser,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users/{htpasswd_user_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                    'htpasswd_user_id',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                    'htpasswd_user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                    'htpasswd_user_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                    'htpasswd_user_id': 'htpasswd_user_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                    'htpasswd_user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (HTPasswdUser,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users/{htpasswd_user_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                    'htpasswd_user_id',
                    'ht_passwd_user',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                    'htpasswd_user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                    'htpasswd_user_id':
                        (str,),
                    'ht_passwd_user':
                        (HTPasswdUser,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                    'htpasswd_user_id': 'htpasswd_user_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                    'htpasswd_user_id': 'path',
                    'ht_passwd_user': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersImportPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users/import',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                    'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post_request',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                    'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post_request':
                        (ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersImportPostRequest,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                    'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_post_endpoint = _Endpoint(
            settings={
                'response_type': (HTPasswdUser,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}/htpasswd_users',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                    'ht_passwd_user',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                    'ht_passwd_user':
                        (HTPasswdUser,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                    'ht_passwd_user': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityProvider,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers/{identity_provider_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider_id',
                    'identity_provider',
                ],
                'required': [
                    'cluster_id',
                    'identity_provider_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider_id':
                        (str,),
                    'identity_provider':
                        (IdentityProvider,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'identity_provider_id': 'identity_provider_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider_id': 'path',
                    'identity_provider': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_post_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityProvider,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/identity_providers',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'identity_provider',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'identity_provider':
                        (IdentityProvider,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'identity_provider': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdIngressesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_ingresses_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses/{ingress_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'ingress_id',
                ],
                'required': [
                    'cluster_id',
                    'ingress_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'ingress_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'ingress_id': 'ingress_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'ingress_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Ingress,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses/{ingress_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'ingress_id',
                ],
                'required': [
                    'cluster_id',
                    'ingress_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'ingress_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'ingress_id': 'ingress_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'ingress_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Ingress,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses/{ingress_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'ingress_id',
                    'ingress',
                ],
                'required': [
                    'cluster_id',
                    'ingress_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'ingress_id':
                        (str,),
                    'ingress':
                        (Ingress,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'ingress_id': 'ingress_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'ingress_id': 'path',
                    'ingress': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_patch_endpoint = _Endpoint(
            settings={
                'response_type': ([Ingress],),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_ingresses_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'ingress',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'ingress':
                        ([Ingress],),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'ingress': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_post_endpoint = _Endpoint(
            settings={
                'response_type': (Ingress,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/ingresses',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_ingresses_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'ingress',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'ingress':
                        (Ingress,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'ingress': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdLimitedSupportReasonsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/limited_support_reasons',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/limited_support_reasons/{limited_support_reason_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'limited_support_reason_id',
                ],
                'required': [
                    'cluster_id',
                    'limited_support_reason_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'limited_support_reason_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'limited_support_reason_id': 'limited_support_reason_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'limited_support_reason_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (LimitedSupportReason,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/limited_support_reasons/{limited_support_reason_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'limited_support_reason_id',
                ],
                'required': [
                    'cluster_id',
                    'limited_support_reason_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'limited_support_reason_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'limited_support_reason_id': 'limited_support_reason_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'limited_support_reason_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_post_endpoint = _Endpoint(
            settings={
                'response_type': (LimitedSupportReason,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/limited_support_reasons',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'limited_support_reason',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'limited_support_reason':
                        (LimitedSupportReason,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'limited_support_reason': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_logs_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdLogsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/logs',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_logs_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_logs_install_get_endpoint = _Endpoint(
            settings={
                'response_type': (Log,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/logs/install',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_logs_install_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'offset',
                    'tail',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'offset':
                        (int,),
                    'tail':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'offset': 'offset',
                    'tail': 'tail',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'offset': 'query',
                    'tail': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_logs_uninstall_get_endpoint = _Endpoint(
            settings={
                'response_type': (Log,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/logs/uninstall',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_logs_uninstall_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'offset',
                    'tail',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'offset':
                        (int,),
                    'tail':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'offset': 'offset',
                    'tail': 'tail',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'offset': 'query',
                    'tail': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdMachinePoolsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools/{machine_pool_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'machine_pool_id',
                ],
                'required': [
                    'cluster_id',
                    'machine_pool_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'machine_pool_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'machine_pool_id': 'machine_pool_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'machine_pool_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (MachinePool,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools/{machine_pool_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'machine_pool_id',
                ],
                'required': [
                    'cluster_id',
                    'machine_pool_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'machine_pool_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'machine_pool_id': 'machine_pool_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'machine_pool_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (MachinePool,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools/{machine_pool_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'machine_pool_id',
                    'machine_pool',
                ],
                'required': [
                    'cluster_id',
                    'machine_pool_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'machine_pool_id':
                        (str,),
                    'machine_pool':
                        (MachinePool,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'machine_pool_id': 'machine_pool_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'machine_pool_id': 'path',
                    'machine_pool': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_post_endpoint = _Endpoint(
            settings={
                'response_type': (MachinePool,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/machine_pools',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'machine_pool',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'machine_pool':
                        (MachinePool,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'machine_pool': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_alerts_get_endpoint = _Endpoint(
            settings={
                'response_type': (AlertsInfo,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/alerts',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_alerts_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cluster_operators_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClusterOperatorsInfo,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/cluster_operators',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cluster_operators_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cpu_total_by_node_roles_os_get_endpoint = _Endpoint(
            settings={
                'response_type': (CPUTotalsNodeRoleOSMetricNode,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/cpu_total_by_node_roles_os',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cpu_total_by_node_roles_os_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_nodes_get_endpoint = _Endpoint(
            settings={
                'response_type': (NodesInfo,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/nodes',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_nodes_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_socket_total_by_node_roles_os_get_endpoint = _Endpoint(
            settings={
                'response_type': (SocketTotalsNodeRoleOSMetricNode,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/metric_queries/socket_total_by_node_roles_os',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_socket_total_by_node_roles_os_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdNodePoolsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_node_pools_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools/{node_pool_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'node_pool_id',
                ],
                'required': [
                    'cluster_id',
                    'node_pool_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'node_pool_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'node_pool_id': 'node_pool_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'node_pool_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (NodePool,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools/{node_pool_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'node_pool_id',
                ],
                'required': [
                    'cluster_id',
                    'node_pool_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'node_pool_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'node_pool_id': 'node_pool_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'node_pool_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (NodePool,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools/{node_pool_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'node_pool_id',
                    'node_pool',
                ],
                'required': [
                    'cluster_id',
                    'node_pool_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'node_pool_id':
                        (str,),
                    'node_pool':
                        (NodePool,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'node_pool_id': 'node_pool_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'node_pool_id': 'path',
                    'node_pool': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_post_endpoint = _Endpoint(
            settings={
                'response_type': (NodePool,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/node_pools',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_node_pools_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'node_pool',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'node_pool':
                        (NodePool,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'node_pool': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Cluster,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'cluster',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'cluster':
                        (Cluster,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'cluster': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_product_get_endpoint = _Endpoint(
            settings={
                'response_type': (Product,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/product',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_product_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/provision_shard',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProvisionShard,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/provision_shard',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_patch_endpoint = _Endpoint(
            settings={
                'response_type': (ProvisionShard,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/provision_shard',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'provision_shard',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'provision_shard':
                        (ProvisionShard,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'provision_shard': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_resources_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClusterResources,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/resources',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_resources_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_resources_live_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClusterResources,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/resources/live',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_resources_live_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_resume_post_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/resume',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_resume_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_status_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClusterStatus,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/status',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_status_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdStsOperatorRolesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/sts_operator_roles',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_operator_iam_role_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/sts_operator_roles/{operator_iam_role_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_operator_iam_role_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'operator_iam_role_id',
                ],
                'required': [
                    'cluster_id',
                    'operator_iam_role_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'operator_iam_role_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'operator_iam_role_id': 'operator_iam_role_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'operator_iam_role_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_post_endpoint = _Endpoint(
            settings={
                'response_type': (OperatorIAMRole,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/sts_operator_roles',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'operator_iam_role',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'operator_iam_role':
                        (OperatorIAMRole,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'operator_iam_role': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersClusterIdUpgradePoliciesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'page',
                    'size',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_post_endpoint = _Endpoint(
            settings={
                'response_type': (UpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'upgrade_policy',
                ],
                'required': [
                    'cluster_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'upgrade_policy':
                        (UpgradePolicy,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'upgrade_policy': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'upgrade_policy_id': 'upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (UpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'upgrade_policy_id': 'upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (UpgradePolicy,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'upgrade_policy_id',
                    'upgrade_policy',
                ],
                'required': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'upgrade_policy_id':
                        (str,),
                    'upgrade_policy':
                        (UpgradePolicy,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'upgrade_policy_id': 'upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'upgrade_policy_id': 'path',
                    'upgrade_policy': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_get_endpoint = _Endpoint(
            settings={
                'response_type': (UpgradePolicyState,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}/state',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'required': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'upgrade_policy_id':
                        (str,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'upgrade_policy_id': 'upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'upgrade_policy_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_patch_endpoint = _Endpoint(
            settings={
                'response_type': (UpgradePolicyState,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters/{cluster_id}/upgrade_policies/{upgrade_policy_id}/state',
                'operation_id': 'api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster_id',
                    'upgrade_policy_id',
                    'upgrade_policy_state',
                ],
                'required': [
                    'cluster_id',
                    'upgrade_policy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster_id':
                        (str,),
                    'upgrade_policy_id':
                        (str,),
                    'upgrade_policy_state':
                        (UpgradePolicyState,),
                },
                'attribute_map': {
                    'cluster_id': 'cluster_id',
                    'upgrade_policy_id': 'upgrade_policy_id',
                },
                'location_map': {
                    'cluster_id': 'path',
                    'upgrade_policy_id': 'path',
                    'upgrade_policy_state': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ClustersGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters',
                'operation_id': 'api_clusters_mgmt_v1_clusters_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_clusters_post_endpoint = _Endpoint(
            settings={
                'response_type': (Cluster,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/clusters',
                'operation_id': 'api_clusters_mgmt_v1_clusters_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cluster',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cluster':
                        (Cluster,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cluster': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_environment_get_endpoint = _Endpoint(
            settings={
                'response_type': (Environment,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/environment',
                'operation_id': 'api_clusters_mgmt_v1_environment_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_environment_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Environment,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/environment',
                'operation_id': 'api_clusters_mgmt_v1_environment_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'environment',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'environment':
                        (Environment,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'environment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_events_post_endpoint = _Endpoint(
            settings={
                'response_type': (Event,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/events',
                'operation_id': 'api_clusters_mgmt_v1_events_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'event',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'event':
                        (Event,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'event': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_flavours_flavour_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Flavour,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/flavours/{flavour_id}',
                'operation_id': 'api_clusters_mgmt_v1_flavours_flavour_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'flavour_id',
                ],
                'required': [
                    'flavour_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flavour_id':
                        (str,),
                },
                'attribute_map': {
                    'flavour_id': 'flavour_id',
                },
                'location_map': {
                    'flavour_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_flavours_flavour_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Flavour,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/flavours/{flavour_id}',
                'operation_id': 'api_clusters_mgmt_v1_flavours_flavour_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'flavour_id',
                    'flavour',
                ],
                'required': [
                    'flavour_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flavour_id':
                        (str,),
                    'flavour':
                        (Flavour,),
                },
                'attribute_map': {
                    'flavour_id': 'flavour_id',
                },
                'location_map': {
                    'flavour_id': 'path',
                    'flavour': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_flavours_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1FlavoursGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/flavours',
                'operation_id': 'api_clusters_mgmt_v1_flavours_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_flavours_post_endpoint = _Endpoint(
            settings={
                'response_type': (Flavour,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/flavours',
                'operation_id': 'api_clusters_mgmt_v1_flavours_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'flavour',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flavour':
                        (Flavour,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'flavour': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_gcp_inquiries_encryption_keys_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1GcpInquiriesEncryptionKeysPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/gcp_inquiries/encryption_keys',
                'operation_id': 'api_clusters_mgmt_v1_gcp_inquiries_encryption_keys_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                    'cloud_provider_data',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'cloud_provider_data':
                        (CloudProviderData,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                    'cloud_provider_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_gcp_inquiries_key_rings_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1GcpInquiriesKeyRingsPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/gcp_inquiries/key_rings',
                'operation_id': 'api_clusters_mgmt_v1_gcp_inquiries_key_rings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                    'cloud_provider_data',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'cloud_provider_data':
                        (CloudProviderData,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                    'cloud_provider_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_gcp_inquiries_regions_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInquiriesRegionsPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/gcp_inquiries/regions',
                'operation_id': 'api_clusters_mgmt_v1_gcp_inquiries_regions_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                    'cloud_provider_data',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'cloud_provider_data':
                        (CloudProviderData,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                    'cloud_provider_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_gcp_inquiries_vpcs_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1AwsInquiriesVpcsPost200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/gcp_inquiries/vpcs',
                'operation_id': 'api_clusters_mgmt_v1_gcp_inquiries_vpcs_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                    'cloud_provider_data',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                    'cloud_provider_data':
                        (CloudProviderData,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                    'cloud_provider_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_get_endpoint = _Endpoint(
            settings={
                'response_type': (Metadata,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1',
                'operation_id': 'api_clusters_mgmt_v1_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_limited_support_reason_templates_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1LimitedSupportReasonTemplatesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/limited_support_reason_templates',
                'operation_id': 'api_clusters_mgmt_v1_limited_support_reason_templates_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'page': 'page',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_limited_support_reason_templates_limited_support_reason_template_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (LimitedSupportReasonTemplate,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/limited_support_reason_templates/{limited_support_reason_template_id}',
                'operation_id': 'api_clusters_mgmt_v1_limited_support_reason_templates_limited_support_reason_template_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limited_support_reason_template_id',
                ],
                'required': [
                    'limited_support_reason_template_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limited_support_reason_template_id':
                        (str,),
                },
                'attribute_map': {
                    'limited_support_reason_template_id': 'limited_support_reason_template_id',
                },
                'location_map': {
                    'limited_support_reason_template_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_machine_types_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1MachineTypesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/machine_types',
                'operation_id': 'api_clusters_mgmt_v1_machine_types_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_machine_types_machine_type_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (MachineType,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/machine_types/{machine_type_id}',
                'operation_id': 'api_clusters_mgmt_v1_machine_types_machine_type_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'machine_type_id',
                ],
                'required': [
                    'machine_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'machine_type_id':
                        (str,),
                },
                'attribute_map': {
                    'machine_type_id': 'machine_type_id',
                },
                'location_map': {
                    'machine_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_products_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ProductsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/products',
                'operation_id': 'api_clusters_mgmt_v1_products_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_products_product_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Product,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/products/{product_id}',
                'operation_id': 'api_clusters_mgmt_v1_products_product_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'product_id',
                ],
                'required': [
                    'product_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'product_id':
                        (str,),
                },
                'attribute_map': {
                    'product_id': 'product_id',
                },
                'location_map': {
                    'product_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_provision_shards_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1ProvisionShardsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/provision_shards',
                'operation_id': 'api_clusters_mgmt_v1_provision_shards_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_provision_shards_post_endpoint = _Endpoint(
            settings={
                'response_type': (ProvisionShard,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/provision_shards',
                'operation_id': 'api_clusters_mgmt_v1_provision_shards_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'provision_shard',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provision_shard':
                        (ProvisionShard,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'provision_shard': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_provision_shards_provision_shard_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/provision_shards/{provision_shard_id}',
                'operation_id': 'api_clusters_mgmt_v1_provision_shards_provision_shard_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'provision_shard_id',
                ],
                'required': [
                    'provision_shard_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provision_shard_id':
                        (str,),
                },
                'attribute_map': {
                    'provision_shard_id': 'provision_shard_id',
                },
                'location_map': {
                    'provision_shard_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_provision_shards_provision_shard_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProvisionShard,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/provision_shards/{provision_shard_id}',
                'operation_id': 'api_clusters_mgmt_v1_provision_shards_provision_shard_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'provision_shard_id',
                ],
                'required': [
                    'provision_shard_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provision_shard_id':
                        (str,),
                },
                'attribute_map': {
                    'provision_shard_id': 'provision_shard_id',
                },
                'location_map': {
                    'provision_shard_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_provision_shards_provision_shard_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (ProvisionShard,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/provision_shards/{provision_shard_id}',
                'operation_id': 'api_clusters_mgmt_v1_provision_shards_provision_shard_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'provision_shard_id',
                    'provision_shard',
                ],
                'required': [
                    'provision_shard_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'provision_shard_id':
                        (str,),
                    'provision_shard':
                        (ProvisionShard,),
                },
                'attribute_map': {
                    'provision_shard_id': 'provision_shard_id',
                },
                'location_map': {
                    'provision_shard_id': 'path',
                    'provision_shard': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_version_gates_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1VersionGatesGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/version_gates',
                'operation_id': 'api_clusters_mgmt_v1_version_gates_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_version_gates_post_endpoint = _Endpoint(
            settings={
                'response_type': (VersionGate,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/version_gates',
                'operation_id': 'api_clusters_mgmt_v1_version_gates_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_gate',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_gate':
                        (VersionGate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'version_gate': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_version_gates_version_gate_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/version_gates/{version_gate_id}',
                'operation_id': 'api_clusters_mgmt_v1_version_gates_version_gate_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_gate_id',
                ],
                'required': [
                    'version_gate_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_gate_id':
                        (str,),
                },
                'attribute_map': {
                    'version_gate_id': 'version_gate_id',
                },
                'location_map': {
                    'version_gate_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_version_gates_version_gate_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (VersionGate,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/version_gates/{version_gate_id}',
                'operation_id': 'api_clusters_mgmt_v1_version_gates_version_gate_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_gate_id',
                ],
                'required': [
                    'version_gate_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_gate_id':
                        (str,),
                },
                'attribute_map': {
                    'version_gate_id': 'version_gate_id',
                },
                'location_map': {
                    'version_gate_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_versions_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApiClustersMgmtV1VersionsGet200Response,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/versions',
                'operation_id': 'api_clusters_mgmt_v1_versions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order',
                    'page',
                    'search',
                    'size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order':
                        (str,),
                    'page':
                        (int,),
                    'search':
                        (str,),
                    'size':
                        (int,),
                },
                'attribute_map': {
                    'order': 'order',
                    'page': 'page',
                    'search': 'search',
                    'size': 'size',
                },
                'location_map': {
                    'order': 'query',
                    'page': 'query',
                    'search': 'query',
                    'size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.api_clusters_mgmt_v1_versions_version_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Version,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/api/clusters_mgmt/v1/versions/{version_id}',
                'operation_id': 'api_clusters_mgmt_v1_versions_version_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_id',
                ],
                'required': [
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_id':
                        (str,),
                },
                'attribute_map': {
                    'version_id': 'version_id',
                },
                'location_map': {
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def api_clusters_mgmt_v1_addons_addon_id_delete(
        self,
        addon_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_delete  # noqa: E501

        Deletes the add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_delete(addon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        return self.api_clusters_mgmt_v1_addons_addon_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_addon_id_get(
        self,
        addon_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_get  # noqa: E501

        Retrieves the details of the add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_get(addon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOn
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        return self.api_clusters_mgmt_v1_addons_addon_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_addon_id_patch(
        self,
        addon_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_patch  # noqa: E501

        Updates the add-on.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_patch(addon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):

        Keyword Args:
            add_on (AddOn): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOn
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        return self.api_clusters_mgmt_v1_addons_addon_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_addon_id_versions_get(
        self,
        addon_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_versions_get  # noqa: E501

        Retrieves the list of add-on versions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_versions_get(addon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):

        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the add-on instead of the names of the columns of a table. For example, in order to sort the add-on versions descending by id the value should be:  ```sql id desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the add-on version instead of the names of the columns of a table. For example, in order to retrieve all the add-on versions with an id starting with `0.1` the value should be:  ```sql id like '0.1.%' ```  If the parameter isn't provided, or if the value is empty, then all the add-on versions that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AddonsAddonIdVersionsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        return self.api_clusters_mgmt_v1_addons_addon_id_versions_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_addon_id_versions_post(
        self,
        addon_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_versions_post  # noqa: E501

        Create a new add-on version and add it to the collection of add-ons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_versions_post(addon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):

        Keyword Args:
            add_on_version (AddOnVersion): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOnVersion
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        return self.api_clusters_mgmt_v1_addons_addon_id_versions_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_addon_id_versions_version_id_delete(
        self,
        addon_id,
        version_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_versions_version_id_delete  # noqa: E501

        Deletes the add-on version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_delete(addon_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):
            version_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        kwargs['version_id'] = \
            version_id
        return self.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_addon_id_versions_version_id_get(
        self,
        addon_id,
        version_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_versions_version_id_get  # noqa: E501

        Retrieves the details of the add-on version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_get(addon_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):
            version_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOnVersion
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        kwargs['version_id'] = \
            version_id
        return self.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_addon_id_versions_version_id_patch(
        self,
        addon_id,
        version_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_addon_id_versions_version_id_patch  # noqa: E501

        Updates the add-on version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_patch(addon_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (str):
            version_id (str):

        Keyword Args:
            add_on_version (AddOnVersion): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOnVersion
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['addon_id'] = \
            addon_id
        kwargs['version_id'] = \
            version_id
        return self.api_clusters_mgmt_v1_addons_addon_id_versions_version_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_get  # noqa: E501

        Retrieves the list of add-ons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the add-on instead of the names of the columns of a table. For example, in order to sort the add-ons descending by name the value should be:  ```sql name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the add-on instead of the names of the columns of a table. For example, in order to retrieve all the add-ons with a name starting with `my` the value should be:  ```sql name like 'my%' ```  If the parameter isn't provided, or if the value is empty, then all the add-ons that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AddonsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_addons_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_addons_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_addons_post  # noqa: E501

        Create a new add-on and add it to the collection of add-ons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_addons_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            add_on (AddOn): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOn
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_addons_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_aws_infrastructure_access_roles_aws_infrastructure_access_role_id_get(
        self,
        aws_infrastructure_access_role_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_aws_infrastructure_access_roles_aws_infrastructure_access_role_id_get  # noqa: E501

        Retrieves the details of the aws infrastructure access role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_aws_infrastructure_access_roles_aws_infrastructure_access_role_id_get(aws_infrastructure_access_role_id, async_req=True)
        >>> result = thread.get()

        Args:
            aws_infrastructure_access_role_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AWSInfrastructureAccessRole
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['aws_infrastructure_access_role_id'] = \
            aws_infrastructure_access_role_id
        return self.api_clusters_mgmt_v1_aws_infrastructure_access_roles_aws_infrastructure_access_role_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_aws_infrastructure_access_roles_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_aws_infrastructure_access_roles_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_aws_infrastructure_access_roles_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the role instead of the names of the columns of a table. For example, in order to sort the roles descending by dislay_name the value should be:  ```sql display_name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the role instead of the names of the columns of a table. For example, in order to retrieve all the role with a name starting with `my`the value should be:  ```sql display_name like 'my%' ```  If the parameter isn't provided, or if the value is empty, then all the roles that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInfrastructureAccessRolesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_aws_infrastructure_access_roles_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_aws_inquiries_machine_types_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_aws_inquiries_machine_types_post  # noqa: E501

        Retrieves the list of machine types in the provided region.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_aws_inquiries_machine_types_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            cloud_provider_data (CloudProviderData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInquiriesMachineTypesPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_aws_inquiries_machine_types_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_aws_inquiries_regions_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_aws_inquiries_regions_post  # noqa: E501

        Retrieves the list of available regions of the cloud provider. IMPORTANT: This list doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of available regions of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_aws_inquiries_regions_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of regions of the provider.. [optional]
            cloud_provider_data (CloudProviderData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInquiriesRegionsPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_aws_inquiries_regions_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_aws_inquiries_sts_credential_requests_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_aws_inquiries_sts_credential_requests_get  # noqa: E501

        Retrieves the list of policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_aws_inquiries_sts_credential_requests_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInquiriesStsCredentialRequestsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_aws_inquiries_sts_credential_requests_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_aws_inquiries_sts_policies_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_aws_inquiries_sts_policies_get  # noqa: E501

        Retrieves the list of policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_aws_inquiries_sts_policies_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the awsstspolicies instead of the names of the columns of a table. For example, in order to sort the policies descending by operator type identifier the value should be:  ```sql orderBy id desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names of the attributes of the awsstspolicies instead of the names of the columns of a table. For example, in order to retrieve all the policies of type  `operatorrole` should be:  ```sql policy_type like 'OperatorRole%' ```  If the parameter isn't provided, or if the value is empty, then all the policies  will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInquiriesStsPoliciesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_aws_inquiries_sts_policies_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_aws_inquiries_vpcs_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_aws_inquiries_vpcs_post  # noqa: E501

        Retrieves the list of available vpcs of the cloud provider for specific region. IMPORTANT: This collection doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of available vpcs of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_aws_inquiries_vpcs_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of vpcs of the provider.. [optional]
            cloud_provider_data (CloudProviderData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInquiriesVpcsPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_aws_inquiries_vpcs_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_available_regions_post(
        self,
        cloud_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_available_regions_post  # noqa: E501

        Retrieves the list of available regions of the cloud provider.  IMPORTANT: This collection doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of available regions of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_available_regions_post(cloud_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_provider_id (str):

        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of regions of the provider.. [optional]
            aws (AWS): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1CloudProvidersCloudProviderIdAvailableRegionsPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cloud_provider_id'] = \
            cloud_provider_id
        return self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_available_regions_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_get(
        self,
        cloud_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_get  # noqa: E501

        Retrieves the details of the cloud provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_get(cloud_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_provider_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudProvider
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cloud_provider_id'] = \
            cloud_provider_id
        return self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_get(
        self,
        cloud_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_get  # noqa: E501

        Retrieves the list of regions of the cloud provider.  IMPORTANT: This collection doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of regions of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_get(cloud_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_provider_id (str):

        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of regions of the provider.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1CloudProvidersCloudProviderIdRegionsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cloud_provider_id'] = \
            cloud_provider_id
        return self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_region_id_get(
        self,
        cloud_provider_id,
        region_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_region_id_get  # noqa: E501

        Retrieves the details of the region.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_region_id_get(cloud_provider_id, region_id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_provider_id (str):
            region_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CloudRegion
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cloud_provider_id'] = \
            cloud_provider_id
        kwargs['region_id'] = \
            region_id
        return self.api_clusters_mgmt_v1_cloud_providers_cloud_provider_id_regions_region_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_cloud_providers_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_cloud_providers_get  # noqa: E501

        Retrieves the list of cloud providers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_cloud_providers_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the cloud provider instead of the names of the columns of a table. For example, in order to sort the clusters descending by name identifier the value should be:  ```sql name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names of the attributes of the cloud provider instead of the names of the columns of a table. For example, in order to retrieve all the cloud providers with a name starting with `A` the value should be:  ```sql name like 'A%' ```  If the parameter isn't provided, or if the value is empty, then all the clusters that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1CloudProvidersGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_cloud_providers_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_addon_inquiry_id_get(
        self,
        cluster_id,
        addon_inquiry_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_addon_inquiry_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_addon_inquiry_id_get(cluster_id, addon_inquiry_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addon_inquiry_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOn
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addon_inquiry_id'] = \
            addon_inquiry_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_addon_inquiry_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the add-on instead of the names of the columns of a table. For example, in order to sort the add-ons descending by name the value should be:  ```sql name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the add-on instead of the names of the columns of a table. For example, in order to retrieve all the add-ons with a name starting with `my` the value should be:  ```sql name like 'my%' ```  If the parameter isn't provided, or if the value is empty, then all the add-ons that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AddonsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_inquiries_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_delete(
        self,
        cluster_id,
        addon_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_delete  # noqa: E501

        Deletes the addon upgrade policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_delete(cluster_id, addon_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addon_upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addon_upgrade_policy_id'] = \
            addon_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_get(
        self,
        cluster_id,
        addon_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_get  # noqa: E501

        Retrieves the details of the addon upgrade policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_get(cluster_id, addon_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addon_upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddonUpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addon_upgrade_policy_id'] = \
            addon_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_patch(
        self,
        cluster_id,
        addon_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_patch  # noqa: E501

        Update the addon upgrade policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_patch(cluster_id, addon_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addon_upgrade_policy_id (str):

        Keyword Args:
            addon_upgrade_policy (AddonUpgradePolicy): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddonUpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addon_upgrade_policy_id'] = \
            addon_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_get(
        self,
        cluster_id,
        addon_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_get  # noqa: E501

        Retrieves the details of the upgrade policy state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_get(cluster_id, addon_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addon_upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddonUpgradePolicyState
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addon_upgrade_policy_id'] = \
            addon_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_patch(
        self,
        cluster_id,
        addon_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_patch  # noqa: E501

        Update the upgrade policy state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_patch(cluster_id, addon_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addon_upgrade_policy_id (str):

        Keyword Args:
            addon_upgrade_policy_state (AddonUpgradePolicyState): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddonUpgradePolicyState
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addon_upgrade_policy_id'] = \
            addon_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_addon_upgrade_policy_id_state_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_get  # noqa: E501

        Retrieves the list of addon upgrade policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdAddonUpgradePoliciesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_post  # noqa: E501

        Adds a new addon upgrade policy to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            addon_upgrade_policy (AddonUpgradePolicy): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddonUpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addon_upgrade_policies_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_delete(
        self,
        cluster_id,
        addoninstallation_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_delete  # noqa: E501

        Delete an add-on installation and remove it from the collection of add-on installations on the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_delete(cluster_id, addoninstallation_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addoninstallation_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addoninstallation_id'] = \
            addoninstallation_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_get(
        self,
        cluster_id,
        addoninstallation_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_get  # noqa: E501

        Retrieves the details of the add-on installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_get(cluster_id, addoninstallation_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addoninstallation_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOnInstallation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addoninstallation_id'] = \
            addoninstallation_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_patch(
        self,
        cluster_id,
        addoninstallation_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_patch  # noqa: E501

        Updates the add-on installation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_patch(cluster_id, addoninstallation_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            addoninstallation_id (str):

        Keyword Args:
            add_on_installation (AddOnInstallation): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOnInstallation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['addoninstallation_id'] = \
            addoninstallation_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addons_addoninstallation_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addons_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addons_get  # noqa: E501

        Retrieves the list of add-on installations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addons_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the add-on installation instead of the names of the columns of a table. For example, in order to sort the add-on installations descending by name the value should be:  ```sql name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the add-on installation instead of the names of the columns of a table. For example, in order to retrieve all the add-on installations with a name starting with `my` the value should be:  ```sql name like 'my%' ```  If the parameter isn't provided, or if the value is empty, then all the add-on installations that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdAddonsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addons_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_addons_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_addons_post  # noqa: E501

        Create a new add-on installation and add it to the collection of add-on installations on the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_addons_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            add_on_installation (AddOnInstallation): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddOnInstallation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_addons_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_delete(
        self,
        cluster_id,
        aws_infrastructure_access_role_grant_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_delete  # noqa: E501

        Deletes the AWS infrastructure access role grant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_delete(cluster_id, aws_infrastructure_access_role_grant_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            aws_infrastructure_access_role_grant_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['aws_infrastructure_access_role_grant_id'] = \
            aws_infrastructure_access_role_grant_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_get(
        self,
        cluster_id,
        aws_infrastructure_access_role_grant_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_get  # noqa: E501

        Retrieves the details of the AWS infrastructure access role grant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_get(cluster_id, aws_infrastructure_access_role_grant_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            aws_infrastructure_access_role_grant_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AWSInfrastructureAccessRoleGrant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['aws_infrastructure_access_role_grant_id'] = \
            aws_infrastructure_access_role_grant_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_aws_infrastructure_access_role_grant_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_get  # noqa: E501

        Retrieves the list of AWS infrastructure access role grants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the AWS infrastructure access role grant instead of the names of the columns of a table. For example, in order to sort the AWS infrastructure access role grants descending by user ARN the value should be:  ```sql user_arn desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the AWS infrastructure access role grant instead of the names of the columns of a table. For example, in order to retrieve all the AWS infrastructure access role grants with a user ARN starting with `user` the value should be:  ```sql user_arn like '%user' ```  If the parameter isn't provided, or if the value is empty, then all the AWS infrastructure access role grants that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_post  # noqa: E501

        Create a new AWS infrastructure access role grant and add it to the collection of AWS infrastructure access role grants on the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            aws_infrastructure_access_role_grant (AWSInfrastructureAccessRoleGrant): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AWSInfrastructureAccessRoleGrant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_infrastructure_access_role_grants_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_get  # noqa: E501

        Retrieves the details of the configuration for the Private Link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrivateLinkConfiguration
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_get  # noqa: E501

        Retrieves the list of principals.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the role binding instead of the names of the columns of a table. For example, in order to retrieve role bindings with role_id AuthenticatedUser:  ```sql role_id = 'AuthenticatedUser' ```  If the parameter isn't provided, or if the value is empty, then all the items that the user has permission to see will be returned.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdAwsPrivateLinkConfigurationPrincipalsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_post  # noqa: E501

        Adds a new principal for the Private Link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            private_link_principal (PrivateLinkPrincipal): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrivateLinkPrincipal
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_delete(
        self,
        cluster_id,
        principal_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_delete  # noqa: E501

        Deletes the principal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_delete(cluster_id, principal_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            principal_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['principal_id'] = \
            principal_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_get(
        self,
        cluster_id,
        principal_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_get  # noqa: E501

        Retrieves the details of the principal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_get(cluster_id, principal_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            principal_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PrivateLinkPrincipal
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['principal_id'] = \
            principal_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_aws_private_link_configuration_principals_principal_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_clusterdeployment_delete(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_clusterdeployment_delete  # noqa: E501

        Deletes the clusterdeployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_clusterdeployment_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_clusterdeployment_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_delete(
        self,
        cluster_id,
        control_plane_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_delete  # noqa: E501

        Deletes the upgrade policy for the control plane.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_delete(cluster_id, control_plane_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            control_plane_upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['control_plane_upgrade_policy_id'] = \
            control_plane_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_get(
        self,
        cluster_id,
        control_plane_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_get  # noqa: E501

        Retrieves the details of the upgrade policy for the control plane.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_get(cluster_id, control_plane_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            control_plane_upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ControlPlaneUpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['control_plane_upgrade_policy_id'] = \
            control_plane_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_patch(
        self,
        cluster_id,
        control_plane_upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_patch  # noqa: E501

        Update the upgrade policy for the control plane.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_patch(cluster_id, control_plane_upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            control_plane_upgrade_policy_id (str):

        Keyword Args:
            control_plane_upgrade_policy (ControlPlaneUpgradePolicy): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ControlPlaneUpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['control_plane_upgrade_policy_id'] = \
            control_plane_upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_control_plane_upgrade_policy_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_get  # noqa: E501

        Retrieves the list of upgrade policies for the control plane.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdControlPlaneUpgradePoliciesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_post  # noqa: E501

        Adds a new upgrade policy to the control plane of the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            control_plane_upgrade_policy (ControlPlaneUpgradePolicy): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ControlPlaneUpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_control_plane_upgrade_policies_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_credentials_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_credentials_get  # noqa: E501

        Retrieves the details of the credentials of a cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_credentials_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClusterCredentials
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_credentials_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_delete(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_delete  # noqa: E501

        Deletes the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            deprovision (bool): If false it will only delete from OCM but not the actual cluster resources. false is only allowed for OCP clusters. true by default.. [optional]
            dry_run (bool): Dry run flag is used to check if the operation can be completed, but won't delete.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_get  # noqa: E501

        Retrieves the details of the external configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ExternalConfiguration
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_get  # noqa: E501

        Retrieves the list of labels.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_delete(
        self,
        cluster_id,
        label_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_delete  # noqa: E501

        Deletes the label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_delete(cluster_id, label_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            label_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['label_id'] = \
            label_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_get(
        self,
        cluster_id,
        label_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_get  # noqa: E501

        Retrieves the details of the label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_get(cluster_id, label_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            label_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Label
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['label_id'] = \
            label_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_patch(
        self,
        cluster_id,
        label_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_patch  # noqa: E501

        Update the label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_patch(cluster_id, label_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            label_id (str):

        Keyword Args:
            label (Label): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Label
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['label_id'] = \
            label_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_label_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_post  # noqa: E501

        Adds a new label to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            label (Label): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Label
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_labels_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_get  # noqa: E501

        Retrieves the list of manifests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdExternalConfigurationManifestsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_delete(
        self,
        cluster_id,
        manifest_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_delete  # noqa: E501

        Deletes the manifest.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_delete(cluster_id, manifest_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            manifest_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['manifest_id'] = \
            manifest_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_get(
        self,
        cluster_id,
        manifest_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_get  # noqa: E501

        Retrieves the details of the manifest.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_get(cluster_id, manifest_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            manifest_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Manifest
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['manifest_id'] = \
            manifest_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_patch(
        self,
        cluster_id,
        manifest_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_patch  # noqa: E501

        Update the manifest.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_patch(cluster_id, manifest_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            manifest_id (str):

        Keyword Args:
            manifest (Manifest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Manifest
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['manifest_id'] = \
            manifest_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_manifest_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_post  # noqa: E501

        Adds a new manifest to a cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            manifest (Manifest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Manifest
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_manifests_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_get  # noqa: E501

        Retrieves the list of syncsets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_post  # noqa: E501

        Adds a new syncset to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            syncset (Syncset): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Syncset
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_delete(
        self,
        cluster_id,
        syncset_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_delete  # noqa: E501

        Deletes the syncset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_delete(cluster_id, syncset_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            syncset_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['syncset_id'] = \
            syncset_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_get(
        self,
        cluster_id,
        syncset_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_get  # noqa: E501

        Retrieves the details of the syncset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_get(cluster_id, syncset_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            syncset_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Syncset
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['syncset_id'] = \
            syncset_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_patch(
        self,
        cluster_id,
        syncset_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_patch  # noqa: E501

        Update the syncset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_patch(cluster_id, syncset_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            syncset_id (str):

        Keyword Args:
            syncset (Syncset): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Syncset
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['syncset_id'] = \
            syncset_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_external_configuration_syncsets_syncset_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_get  # noqa: E501

        Retrieves the list of reasons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdGateAgreementsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_post  # noqa: E501

        Adds a new agreed version gate to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            version_gate_agreement (VersionGateAgreement): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VersionGateAgreement
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_delete(
        self,
        cluster_id,
        version_gate_agreement_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_delete  # noqa: E501

        Deletes the version gate agreement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_delete(cluster_id, version_gate_agreement_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            version_gate_agreement_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['version_gate_agreement_id'] = \
            version_gate_agreement_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_get(
        self,
        cluster_id,
        version_gate_agreement_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_get  # noqa: E501

        Retrieves the details of the version gate agreement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_get(cluster_id, version_gate_agreement_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            version_gate_agreement_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VersionGateAgreement
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['version_gate_agreement_id'] = \
            version_gate_agreement_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_gate_agreements_version_gate_agreement_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_get  # noqa: E501

        Retrieves the details of the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Cluster
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_groups_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_groups_get  # noqa: E501

        Retrieves the list of groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_groups_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdGroupsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_groups_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_get(
        self,
        cluster_id,
        group_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_get  # noqa: E501

        Retrieves the details of the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_get(cluster_id, group_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            group_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Group
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['group_id'] = \
            group_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_get(
        self,
        cluster_id,
        group_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_get  # noqa: E501

        Retrieves the list of users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_get(cluster_id, group_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            group_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['group_id'] = \
            group_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_post(
        self,
        cluster_id,
        group_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_post  # noqa: E501

        Adds a new user to the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_post(cluster_id, group_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            group_id (str):

        Keyword Args:
            user (User): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['group_id'] = \
            group_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_delete(
        self,
        cluster_id,
        group_id,
        user_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_delete  # noqa: E501

        Deletes the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_delete(cluster_id, group_id, user_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            group_id (str):
            user_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['group_id'] = \
            group_id
        kwargs['user_id'] = \
            user_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_get(
        self,
        cluster_id,
        group_id,
        user_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_get  # noqa: E501

        Retrieves the details of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_get(cluster_id, group_id, user_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            group_id (str):
            user_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['group_id'] = \
            group_id
        kwargs['user_id'] = \
            user_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_groups_group_id_users_user_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_hibernate_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_hibernate_post  # noqa: E501

        Initiates cluster hibernation. While hibernating a cluster will not consume any cloud provider infrastructure but will be counted for quota.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_hibernate_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_hibernate_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_hypershift_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_hypershift_get  # noqa: E501

        Retrieves the Hypershift details for a single cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_hypershift_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HypershiftConfig
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_hypershift_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_get  # noqa: E501

        Retrieves the list of identity providers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdIdentityProvidersGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_delete(
        self,
        cluster_id,
        identity_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_delete  # noqa: E501

        Deletes the identity provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_delete(cluster_id, identity_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_get(
        self,
        cluster_id,
        identity_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_get  # noqa: E501

        Retrieves the details of the identity provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_get(cluster_id, identity_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityProvider
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_get(
        self,
        cluster_id,
        identity_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_get  # noqa: E501

        Retrieves the list of _HTPasswd_ IDP users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_get(cluster_id, identity_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_delete(
        self,
        cluster_id,
        identity_provider_id,
        htpasswd_user_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_delete  # noqa: E501

        Deletes the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_delete(cluster_id, identity_provider_id, htpasswd_user_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):
            htpasswd_user_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        kwargs['htpasswd_user_id'] = \
            htpasswd_user_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_get(
        self,
        cluster_id,
        identity_provider_id,
        htpasswd_user_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_get  # noqa: E501

        Retrieves the details of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_get(cluster_id, identity_provider_id, htpasswd_user_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):
            htpasswd_user_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HTPasswdUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        kwargs['htpasswd_user_id'] = \
            htpasswd_user_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_patch(
        self,
        cluster_id,
        identity_provider_id,
        htpasswd_user_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_patch  # noqa: E501

        Updates the user's password. The username is not editable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_patch(cluster_id, identity_provider_id, htpasswd_user_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):
            htpasswd_user_id (str):

        Keyword Args:
            ht_passwd_user (HTPasswdUser): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HTPasswdUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        kwargs['htpasswd_user_id'] = \
            htpasswd_user_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_htpasswd_user_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post(
        self,
        cluster_id,
        identity_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post  # noqa: E501

        Adds multiple new users to the _HTPasswd_ file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post(cluster_id, identity_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):

        Keyword Args:
            api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post_request (ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersImportPostRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdHtpasswdUsersImportPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_import_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_post(
        self,
        cluster_id,
        identity_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_post  # noqa: E501

        Adds a new user to the _HTPasswd_ file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_post(cluster_id, identity_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):

        Keyword Args:
            ht_passwd_user (HTPasswdUser): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HTPasswdUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_htpasswd_users_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_patch(
        self,
        cluster_id,
        identity_provider_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_patch  # noqa: E501

        Update identity provider in the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_patch(cluster_id, identity_provider_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            identity_provider_id (str):

        Keyword Args:
            identity_provider (IdentityProvider): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityProvider
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['identity_provider_id'] = \
            identity_provider_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_identity_provider_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_post  # noqa: E501

        Adds a new identity provider to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            identity_provider (IdentityProvider): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityProvider
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_identity_providers_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_ingresses_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_ingresses_get  # noqa: E501

        Retrieves the list of ingresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdIngressesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_delete(
        self,
        cluster_id,
        ingress_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_delete  # noqa: E501

        Deletes the ingress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_delete(cluster_id, ingress_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            ingress_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['ingress_id'] = \
            ingress_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_get(
        self,
        cluster_id,
        ingress_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_get  # noqa: E501

        Retrieves the details of the ingress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_get(cluster_id, ingress_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            ingress_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ingress
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['ingress_id'] = \
            ingress_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_patch(
        self,
        cluster_id,
        ingress_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_patch  # noqa: E501

        Updates the ingress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_patch(cluster_id, ingress_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            ingress_id (str):

        Keyword Args:
            ingress (Ingress): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ingress
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['ingress_id'] = \
            ingress_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_ingress_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_ingresses_patch(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_ingresses_patch  # noqa: E501

        Updates all ingresses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_patch(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            ingress ([Ingress]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Ingress]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_ingresses_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_ingresses_post  # noqa: E501

        Adds a new ingress to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            ingress (Ingress): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Ingress
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_ingresses_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_get  # noqa: E501

        Retrieves the list of reasons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdLimitedSupportReasonsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_delete(
        self,
        cluster_id,
        limited_support_reason_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_delete  # noqa: E501

        Deletes the reason.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_delete(cluster_id, limited_support_reason_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            limited_support_reason_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['limited_support_reason_id'] = \
            limited_support_reason_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_get(
        self,
        cluster_id,
        limited_support_reason_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_get  # noqa: E501

        Retrieves the details of the reason.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_get(cluster_id, limited_support_reason_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            limited_support_reason_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LimitedSupportReason
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['limited_support_reason_id'] = \
            limited_support_reason_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_limited_support_reason_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_post  # noqa: E501

        Adds a new reason to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            limited_support_reason (LimitedSupportReason): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LimitedSupportReason
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_limited_support_reasons_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_logs_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_logs_get  # noqa: E501

        Retrieves the list of log links.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_logs_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdLogsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_logs_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_logs_install_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_logs_install_get  # noqa: E501

        Retrieves the details of the log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_logs_install_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            offset (int): Line offset to start logs from. if 0 retreive entire log. If offset > #lines return an empty log.. [optional]
            tail (int): Returns the number of tail lines from the end of the log. If there are no line breaks or the number of lines < tail return the entire log. Either 'tail' or 'offset' can be set. Not both. . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Log
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_logs_install_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_logs_uninstall_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_logs_uninstall_get  # noqa: E501

        Retrieves the details of the log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_logs_uninstall_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            offset (int): Line offset to start logs from. if 0 retreive entire log. If offset > #lines return an empty log.. [optional]
            tail (int): Returns the number of tail lines from the end of the log. If there are no line breaks or the number of lines < tail return the entire log. Either 'tail' or 'offset' can be set. Not both. . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Log
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_logs_uninstall_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_get  # noqa: E501

        Retrieves the list of machine pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdMachinePoolsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_delete(
        self,
        cluster_id,
        machine_pool_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_delete  # noqa: E501

        Deletes the machine pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_delete(cluster_id, machine_pool_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            machine_pool_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['machine_pool_id'] = \
            machine_pool_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_get(
        self,
        cluster_id,
        machine_pool_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_get  # noqa: E501

        Retrieves the details of the machine pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_get(cluster_id, machine_pool_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            machine_pool_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MachinePool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['machine_pool_id'] = \
            machine_pool_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_patch(
        self,
        cluster_id,
        machine_pool_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_patch  # noqa: E501

        Updates the machine pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_patch(cluster_id, machine_pool_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            machine_pool_id (str):

        Keyword Args:
            machine_pool (MachinePool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MachinePool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['machine_pool_id'] = \
            machine_pool_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_machine_pool_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_post  # noqa: E501

        Adds a new machine pool to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            machine_pool (MachinePool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MachinePool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_machine_pools_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_alerts_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_alerts_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_alerts_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AlertsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_alerts_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cluster_operators_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cluster_operators_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cluster_operators_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClusterOperatorsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cluster_operators_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cpu_total_by_node_roles_os_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cpu_total_by_node_roles_os_get  # noqa: E501

        Retrieves the metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cpu_total_by_node_roles_os_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CPUTotalsNodeRoleOSMetricNode
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_cpu_total_by_node_roles_os_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_nodes_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_nodes_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_nodes_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NodesInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_nodes_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_socket_total_by_node_roles_os_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_socket_total_by_node_roles_os_get  # noqa: E501

        Retrieves the metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_socket_total_by_node_roles_os_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SocketTotalsNodeRoleOSMetricNode
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_metric_queries_socket_total_by_node_roles_os_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_node_pools_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_node_pools_get  # noqa: E501

        Retrieves the list of node pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdNodePoolsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_delete(
        self,
        cluster_id,
        node_pool_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_delete  # noqa: E501

        Deletes the node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_delete(cluster_id, node_pool_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            node_pool_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['node_pool_id'] = \
            node_pool_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_get(
        self,
        cluster_id,
        node_pool_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_get  # noqa: E501

        Retrieves the details of the node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_get(cluster_id, node_pool_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            node_pool_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NodePool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['node_pool_id'] = \
            node_pool_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_patch(
        self,
        cluster_id,
        node_pool_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_patch  # noqa: E501

        Updates the node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_patch(cluster_id, node_pool_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            node_pool_id (str):

        Keyword Args:
            node_pool (NodePool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NodePool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['node_pool_id'] = \
            node_pool_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_node_pool_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_node_pools_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_node_pools_post  # noqa: E501

        Adds a new node pool to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            node_pool (NodePool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NodePool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_node_pools_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_patch(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_patch  # noqa: E501

        Updates the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_patch(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            cluster (Cluster): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Cluster
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_product_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_product_get  # noqa: E501

        Retrieves the details of the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_product_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Product
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_product_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_delete(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_delete  # noqa: E501

        Delete the provision shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_get  # noqa: E501

        Retrieves the details of the provision shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProvisionShard
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_patch(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_patch  # noqa: E501

        Updates the details of the provision shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_patch(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            provision_shard (ProvisionShard): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProvisionShard
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_provision_shard_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_resources_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_resources_get  # noqa: E501

        Retrieves a list of resources for a cluster in error state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_resources_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClusterResources
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_resources_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_resources_live_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_resources_live_get  # noqa: E501

        Retrieves currently available cluster resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_resources_live_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClusterResources
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_resources_live_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_resume_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_resume_post  # noqa: E501

        Resumes from Hibernation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_resume_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_resume_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_status_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_status_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClusterStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_status_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_get  # noqa: E501

        Retrieves the list of operator roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdStsOperatorRolesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_operator_iam_role_id_delete(
        self,
        cluster_id,
        operator_iam_role_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_operator_iam_role_id_delete  # noqa: E501

        Deletes the operator role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_operator_iam_role_id_delete(cluster_id, operator_iam_role_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            operator_iam_role_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['operator_iam_role_id'] = \
            operator_iam_role_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_operator_iam_role_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_post  # noqa: E501

        Adds a new operator role to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            operator_iam_role (OperatorIAMRole): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            OperatorIAMRole
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_sts_operator_roles_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_get(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_get  # noqa: E501

        Retrieves the list of upgrade policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_get(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersClusterIdUpgradePoliciesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_post(
        self,
        cluster_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_post  # noqa: E501

        Adds a new upgrade policy to the cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_post(cluster_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):

        Keyword Args:
            upgrade_policy (UpgradePolicy): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_delete(
        self,
        cluster_id,
        upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_delete  # noqa: E501

        Deletes the upgrade policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_delete(cluster_id, upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['upgrade_policy_id'] = \
            upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_get(
        self,
        cluster_id,
        upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_get  # noqa: E501

        Retrieves the details of the upgrade policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_get(cluster_id, upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['upgrade_policy_id'] = \
            upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_patch(
        self,
        cluster_id,
        upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_patch  # noqa: E501

        Update the upgrade policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_patch(cluster_id, upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            upgrade_policy_id (str):

        Keyword Args:
            upgrade_policy (UpgradePolicy): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpgradePolicy
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['upgrade_policy_id'] = \
            upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_get(
        self,
        cluster_id,
        upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_get  # noqa: E501

        Retrieves the details of the upgrade policy state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_get(cluster_id, upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            upgrade_policy_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpgradePolicyState
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['upgrade_policy_id'] = \
            upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_patch(
        self,
        cluster_id,
        upgrade_policy_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_patch  # noqa: E501

        Update the upgrade policy state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_patch(cluster_id, upgrade_policy_id, async_req=True)
        >>> result = thread.get()

        Args:
            cluster_id (str):
            upgrade_policy_id (str):

        Keyword Args:
            upgrade_policy_state (UpgradePolicyState): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpgradePolicyState
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cluster_id'] = \
            cluster_id
        kwargs['upgrade_policy_id'] = \
            upgrade_policy_id
        return self.api_clusters_mgmt_v1_clusters_cluster_id_upgrade_policies_upgrade_policy_id_state_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_get  # noqa: E501

        Retrieves the list of clusters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the cluster instead of the names of the columns of a table. For example, in order to sort the clusters descending by region identifier the value should be:  ```sql region.id desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names of the attributes of the cluster instead of the names of the columns of a table. For example, in order to retrieve all the clusters with a name starting with `my` in the `us-east-1` region the value should be:  ```sql name like 'my%' and region.id = 'us-east-1' ```  If the parameter isn't provided, or if the value is empty, then all the clusters that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ClustersGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_clusters_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_clusters_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_clusters_post  # noqa: E501

        Provision a new cluster and add it to the collection of clusters.  See the `register_cluster` method for adding an existing cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_clusters_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            cluster (Cluster): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Cluster
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_clusters_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_environment_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_environment_get  # noqa: E501

        Retrieves the details of the environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_environment_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Environment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_environment_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_environment_patch(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_environment_patch  # noqa: E501

        Updates the environment.  Attributes that can be updated are:  - `last_upgrade_available_check` - `last_limited_support_check`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_environment_patch(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            environment (Environment): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Environment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_environment_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_events_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_events_post  # noqa: E501

        Adds a new event to be tracked. When sending a new event request, it gets tracked in Prometheus, Pendo, CloudWatch, or whichever analytics client is configured as part of clusters service. This allows for reporting on events that happen outside of a regular API request, but are found to be useful for understanding customer needs and possible blockers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_events_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            event (Event): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Event
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_events_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_flavours_flavour_id_get(
        self,
        flavour_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_flavours_flavour_id_get  # noqa: E501

        Retrieves the details of the cluster flavour.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_flavours_flavour_id_get(flavour_id, async_req=True)
        >>> result = thread.get()

        Args:
            flavour_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Flavour
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['flavour_id'] = \
            flavour_id
        return self.api_clusters_mgmt_v1_flavours_flavour_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_flavours_flavour_id_patch(
        self,
        flavour_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_flavours_flavour_id_patch  # noqa: E501

        Updates the flavour.  Attributes that can be updated are:  - `aws.infra_volume` - `aws.infra_instance_type` - `gcp.infra_instance_type`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_flavours_flavour_id_patch(flavour_id, async_req=True)
        >>> result = thread.get()

        Args:
            flavour_id (str):

        Keyword Args:
            flavour (Flavour): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Flavour
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['flavour_id'] = \
            flavour_id
        return self.api_clusters_mgmt_v1_flavours_flavour_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_flavours_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_flavours_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_flavours_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the flavour instead of the names of the columns of a table. For example, in order to sort the flavours descending by name the value should be:  ```sql name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the flavour instead of the names of the columns of a table. For example, in order to retrieve all the flavours with a name starting with `my`the value should be:  ```sql name like 'my%' ```  If the parameter isn't provided, or if the value is empty, then all the flavours that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1FlavoursGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_flavours_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_flavours_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_flavours_post  # noqa: E501

        Adds a new cluster flavour.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_flavours_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            flavour (Flavour): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Flavour
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_flavours_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_gcp_inquiries_encryption_keys_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_gcp_inquiries_encryption_keys_post  # noqa: E501

        Retrieves the list of encryption keys. IMPORTANT: This collection doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of available regions of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_gcp_inquiries_encryption_keys_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of regions of the provider.. [optional]
            cloud_provider_data (CloudProviderData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1GcpInquiriesEncryptionKeysPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_gcp_inquiries_encryption_keys_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_gcp_inquiries_key_rings_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_gcp_inquiries_key_rings_post  # noqa: E501

        Retrieves the list of available key rings of the cloud provider. IMPORTANT: This collection doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of available regions of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_gcp_inquiries_key_rings_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of key rings of the provider.. [optional]
            cloud_provider_data (CloudProviderData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1GcpInquiriesKeyRingsPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_gcp_inquiries_key_rings_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_gcp_inquiries_regions_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_gcp_inquiries_regions_post  # noqa: E501

        Retrieves the list of available regions of the cloud provider. IMPORTANT: This list doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of available regions of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_gcp_inquiries_regions_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of regions of the provider.. [optional]
            cloud_provider_data (CloudProviderData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInquiriesRegionsPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_gcp_inquiries_regions_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_gcp_inquiries_vpcs_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_gcp_inquiries_vpcs_post  # noqa: E501

        Retrieves the list of available vpcs of the cloud provider for specific region. IMPORTANT: This collection doesn't currently support paging or searching, so the returned `page` will always be 1 and `size` and `total` will always be the total number of available vpcs of the provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_gcp_inquiries_vpcs_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the returned page, where one corresponds to the first page. As this collection doesn't support paging the result will always be `1`.. [optional]
            size (int): Number of items that will be contained in the returned page. As this collection doesn't support paging or searching the result will always be the total number of vpcs of the provider.. [optional]
            cloud_provider_data (CloudProviderData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1AwsInquiriesVpcsPost200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_gcp_inquiries_vpcs_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_get  # noqa: E501

        Retrieves the version metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Metadata
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_limited_support_reason_templates_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_limited_support_reason_templates_get  # noqa: E501

        Retrieves the list of templates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_limited_support_reason_templates_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            size (int): Number of items contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1LimitedSupportReasonTemplatesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_limited_support_reason_templates_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_limited_support_reason_templates_limited_support_reason_template_id_get(
        self,
        limited_support_reason_template_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_limited_support_reason_templates_limited_support_reason_template_id_get  # noqa: E501

        Retrieves the details of the template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_limited_support_reason_templates_limited_support_reason_template_id_get(limited_support_reason_template_id, async_req=True)
        >>> result = thread.get()

        Args:
            limited_support_reason_template_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LimitedSupportReasonTemplate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['limited_support_reason_template_id'] = \
            limited_support_reason_template_id
        return self.api_clusters_mgmt_v1_limited_support_reason_templates_limited_support_reason_template_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_machine_types_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_machine_types_get  # noqa: E501

        Retrieves the list of machine types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_machine_types_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the machine type instead of the names of the columns of a table. For example, in order to sort the machine types descending by name identifier the value should be:  ```sql name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names of the attributes of the machine type instead of the names of the columns of a table. For example, in order to retrieve all the machine types with a name starting with `A` the value should be:  ```sql name like 'A%' ```  If the parameter isn't provided, or if the value is empty, then all the machine types that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1MachineTypesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_machine_types_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_machine_types_machine_type_id_get(
        self,
        machine_type_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_machine_types_machine_type_id_get  # noqa: E501

        Retrieves the details of the machine type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_machine_types_machine_type_id_get(machine_type_id, async_req=True)
        >>> result = thread.get()

        Args:
            machine_type_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MachineType
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['machine_type_id'] = \
            machine_type_id
        return self.api_clusters_mgmt_v1_machine_types_machine_type_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_products_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_products_get  # noqa: E501

        Retrieves the list of products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_products_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the product instead of the names of the columns of a table. For example, in order to sort the products descending by name the value should be:  ```sql name desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the product instead of the names of the columns of a table. For example, in order to retrieve all the products with a name starting with `my` the value should be:  ```sql name like 'my%' ```  If the parameter isn't provided, or if the value is empty, then all the products that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ProductsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_products_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_products_product_id_get(
        self,
        product_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_products_product_id_get  # noqa: E501

        Retrieves the details of the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_products_product_id_get(product_id, async_req=True)
        >>> result = thread.get()

        Args:
            product_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Product
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['product_id'] = \
            product_id
        return self.api_clusters_mgmt_v1_products_product_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_provision_shards_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_provision_shards_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_provision_shards_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names of the attributes of the cluster instead of the names of the columns of a table. For example, in order to retrieve all the clusters with a name starting with `my` in the `us-east-1` region the value should be:  ```sql name like 'my%' and region.id = 'us-east-1' ```  If the parameter isn't provided, or if the value is empty, then all the provision shards that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1ProvisionShardsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_provision_shards_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_provision_shards_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_provision_shards_post  # noqa: E501

        Adds a provision shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_provision_shards_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            provision_shard (ProvisionShard): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProvisionShard
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_provision_shards_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_provision_shards_provision_shard_id_delete(
        self,
        provision_shard_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_provision_shards_provision_shard_id_delete  # noqa: E501

        Delete the provision shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_provision_shards_provision_shard_id_delete(provision_shard_id, async_req=True)
        >>> result = thread.get()

        Args:
            provision_shard_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provision_shard_id'] = \
            provision_shard_id
        return self.api_clusters_mgmt_v1_provision_shards_provision_shard_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_provision_shards_provision_shard_id_get(
        self,
        provision_shard_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_provision_shards_provision_shard_id_get  # noqa: E501

        Retrieves the details of the provision shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_provision_shards_provision_shard_id_get(provision_shard_id, async_req=True)
        >>> result = thread.get()

        Args:
            provision_shard_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProvisionShard
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provision_shard_id'] = \
            provision_shard_id
        return self.api_clusters_mgmt_v1_provision_shards_provision_shard_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_provision_shards_provision_shard_id_patch(
        self,
        provision_shard_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_provision_shards_provision_shard_id_patch  # noqa: E501

        Updates the details of the provision shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_provision_shards_provision_shard_id_patch(provision_shard_id, async_req=True)
        >>> result = thread.get()

        Args:
            provision_shard_id (str):

        Keyword Args:
            provision_shard (ProvisionShard): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProvisionShard
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['provision_shard_id'] = \
            provision_shard_id
        return self.api_clusters_mgmt_v1_provision_shards_provision_shard_id_patch_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_version_gates_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_version_gates_get  # noqa: E501

        Retrieves a list of version gates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_version_gates_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the attributes of the version gate instead of the names of the columns of a table. For example, in order to sort the version gates descending by identifier the value should be:  ```sql id desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, but using the names of the attributes of the version gate instead of the names of the columns of a table.  If the parameter isn't provided, or if the value is empty, then all the version gates that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.  Default value is `100`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1VersionGatesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_version_gates_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_version_gates_post(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_version_gates_post  # noqa: E501

        Adds a new version gate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_version_gates_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            version_gate (VersionGate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VersionGate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_version_gates_post_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_version_gates_version_gate_id_delete(
        self,
        version_gate_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_version_gates_version_gate_id_delete  # noqa: E501

        Deletes the version gate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_version_gates_version_gate_id_delete(version_gate_id, async_req=True)
        >>> result = thread.get()

        Args:
            version_gate_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version_gate_id'] = \
            version_gate_id
        return self.api_clusters_mgmt_v1_version_gates_version_gate_id_delete_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_version_gates_version_gate_id_get(
        self,
        version_gate_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_version_gates_version_gate_id_get  # noqa: E501

        Retrieves the details of the version gate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_version_gates_version_gate_id_get(version_gate_id, async_req=True)
        >>> result = thread.get()

        Args:
            version_gate_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            VersionGate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version_gate_id'] = \
            version_gate_id
        return self.api_clusters_mgmt_v1_version_gates_version_gate_id_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_versions_get(
        self,
        **kwargs
    ):
        """api_clusters_mgmt_v1_versions_get  # noqa: E501

        Retrieves a list of versions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_versions_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order (str): Order criteria.  The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the names of the attributes of the version instead of the names of the columns of a table. For example, in order to sort the versions descending by identifier the value should be:  ```sql id desc ```  If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.. [optional]
            page (int): Index of the requested page, where one corresponds to the first page.. [optional]
            search (str): Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names of the attributes of the version instead of the names of the columns of a table. For example, in order to retrieve all the versions that are enabled:  ```sql enabled = 't' ```  If the parameter isn't provided, or if the value is empty, then all the versions that the user has permission to see will be returned.. [optional]
            size (int): Maximum number of items that will be contained in the returned page.  Default value is `100`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiClustersMgmtV1VersionsGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.api_clusters_mgmt_v1_versions_get_endpoint.call_with_http_info(**kwargs)

    def api_clusters_mgmt_v1_versions_version_id_get(
        self,
        version_id,
        **kwargs
    ):
        """api_clusters_mgmt_v1_versions_version_id_get  # noqa: E501

        Retrieves the details of the version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_clusters_mgmt_v1_versions_version_id_get(version_id, async_req=True)
        >>> result = thread.get()

        Args:
            version_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Version
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['version_id'] = \
            version_id
        return self.api_clusters_mgmt_v1_versions_version_id_get_endpoint.call_with_http_info(**kwargs)

